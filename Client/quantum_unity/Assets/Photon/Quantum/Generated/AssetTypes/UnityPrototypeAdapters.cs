// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
// </auto-generated>

using System;
namespace Quantum.Prototypes.Unity {
  [Quantum.Prototypes.PrototypeAttribute(typeof(Quantum.BlackboardValue))]
  [System.SerializableAttribute()]
  public class BlackboardValue_Prototype : Quantum.PrototypeAdapter<Quantum.Prototypes.BlackboardValue_Prototype> {
    public System.String _field_used_;
    public Quantum.QBoolean BooleanValue;
    public System.Byte ByteValue;
    public System.Int32 IntegerValue;
    public Photon.Deterministic.FP FPValue;
    public Photon.Deterministic.FPVector2 FPVector2Value;
    public Photon.Deterministic.FPVector3 FPVector3Value;
    [Quantum.LocalReference]
    public global::EntityPrototype EntityRefValue;

    public sealed override Quantum.Prototypes.BlackboardValue_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.BlackboardValue_Prototype();
      result._field_used_ = this._field_used_;
      result.BooleanValue = this.BooleanValue;
      result.ByteValue = this.ByteValue;
      result.IntegerValue = this.IntegerValue;
      result.FPValue = this.FPValue;
      result.FPVector2Value = this.FPVector2Value;
      result.FPVector3Value = this.FPVector3Value;
      converter.Convert(this.EntityRefValue, out result.EntityRefValue);
      return result;
    }
  }
  [Quantum.Prototypes.PrototypeAttribute(typeof(Quantum.BlackboardEntry))]
  [System.SerializableAttribute()]
  public class BlackboardEntry_Prototype : Quantum.PrototypeAdapter<Quantum.Prototypes.BlackboardEntry_Prototype> {
    public BlackboardValue_Prototype Value;
    [Quantum.Inspector.DynamicCollectionAttribute()]
    public Quantum.AssetRefBTDecorator[] ReactiveDecorators = System.Array.Empty<Quantum.AssetRefBTDecorator>();

    public sealed override Quantum.Prototypes.BlackboardEntry_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.BlackboardEntry_Prototype();
      result.Value = this.Value.Convert(converter);
      result.ReactiveDecorators = this.ReactiveDecorators;
      return result;
    }
  }
  [Quantum.Prototypes.PrototypeAttribute(typeof(Quantum.AIBlackboardComponent))]
  [System.SerializableAttribute()]
  public class AIBlackboardComponent_Prototype : Quantum.PrototypeAdapter<Quantum.Prototypes.AIBlackboardComponent_Prototype> {
    public Quantum.AssetRefAIBlackboard Board;
    [Quantum.Inspector.DynamicCollectionAttribute()]
    public BlackboardEntry_Prototype[] Entries = System.Array.Empty<BlackboardEntry_Prototype>();

    public sealed override Quantum.Prototypes.AIBlackboardComponent_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.AIBlackboardComponent_Prototype();
      result.Board = this.Board;
      result.Entries = System.Array.ConvertAll(this.Entries, x => x.Convert(converter));
      return result;
    }
  }
  [Quantum.Prototypes.PrototypeAttribute(typeof(Quantum.ProjectileSpec))]
  [System.SerializableAttribute()]
  public class ProjectileSpec_Prototype : Quantum.PrototypeAdapter<Quantum.Prototypes.ProjectileSpec_Prototype> {
    public Quantum.PlayerRef Owner;
    public System.Int32 Team;
    public Photon.Deterministic.FP Power;
    public Photon.Deterministic.FP HitTime;
    [Quantum.LocalReference]
    public global::EntityPrototype Attacker;
    [Quantum.LocalReference]
    public global::EntityPrototype Defender;
    [Quantum.Inspector.MaxStringByteCountAttribute((Int32)62, "Unicode")]
    public System.String Model;
    [Quantum.Inspector.MaxStringByteCountAttribute((Int32)62, "Unicode")]
    public System.String HitEffect;
    public Quantum.Prototypes.DebuffType_Prototype Debuff;
    public Photon.Deterministic.FP DebuffDuration;

    public sealed override Quantum.Prototypes.ProjectileSpec_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.ProjectileSpec_Prototype();
      result.Owner = this.Owner;
      result.Team = this.Team;
      result.Power = this.Power;
      result.HitTime = this.HitTime;
      converter.Convert(this.Attacker, out result.Attacker);
      converter.Convert(this.Defender, out result.Defender);
      result.Model = this.Model;
      result.HitEffect = this.HitEffect;
      result.Debuff = this.Debuff;
      result.DebuffDuration = this.DebuffDuration;
      return result;
    }
  }

}
