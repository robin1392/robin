// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109


namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum ActionStateType : int {
    Idle,
    Walk,
    Attack,
    Skill,
  }
  public enum ActorType : int {
    Dice,
    Boss,
    Guardian,
    Tower,
  }
  public enum DebuffType : int {
    None,
    Frozen,
    Taunted,
  }
  public enum DiceType : int {
    Minion,
    Magic,
    Installation,
    Hero,
  }
  public enum GOAPWorldState : long {
    Root = 1,
    TargetSelected = 2,
    CarryingTarget = 4,
    TargetDelivered = 8,
  }
  public enum HitColor : int {
    None,
    Fire,
  }
  public enum StateType : int {
    Ready,
    Countdown,
    Play,
    GameOver,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean HasFlag(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [System.ObsoleteAttribute("This type will be removed with 2.1 release. Use instance methods instead.")]
  public static unsafe partial class BitSet {
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet1024* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet1024* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(((UInt64*)set), 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet128* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet128* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(((UInt64*)set), 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet2048* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet2048* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(((UInt64*)set), 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet256* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet256* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(((UInt64*)set), 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet4096* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet4096* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(((UInt64*)set), 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet512* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet512* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(((UInt64*)set), 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet6* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet6* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(((UInt64*)set), 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct QString128 : IQString, IEquatable<QString128> {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private UInt16 byteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("byteCount")]
    private fixed Byte bytes[126];
    public const int MaxByteCount = 126;
    public QString128(String str) {
      QString.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QString.GetLength(ref this);
      }
    }
    public int ByteCount {
      get {
        return byteCount;
      }
    }
    public override System.String ToString() {
      return QString.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QString.CanHold(str, MaxByteCount);
    }
    Int32 IQString.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QString.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QString.CompareOrdinal(ref this, str);
    }
    public static implicit operator QString128(String str) {
      return new QString128(str);
    }
    public static implicit operator String(QString128 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QString.AreEqual(ref this, obj);
    }
    public Boolean Equals(QString128 str) {
      return QString.CompareOrdinal(ref this, str.bytes, str.byteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + byteCount.GetHashCode();
        fixed (Byte* p = bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.byteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QString128*)ptr;
        serializer.Stream.Serialize(&p->byteCount);
        Assert.Always(p->byteCount <= 126);
        serializer.Stream.SerializeBuffer(&p->bytes[0], p->byteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct QString64 : IQString, IEquatable<QString64> {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private UInt16 byteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("byteCount")]
    private fixed Byte bytes[62];
    public const int MaxByteCount = 62;
    public QString64(String str) {
      QString.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QString.GetLength(ref this);
      }
    }
    public int ByteCount {
      get {
        return byteCount;
      }
    }
    public override System.String ToString() {
      return QString.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QString.CanHold(str, MaxByteCount);
    }
    Int32 IQString.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QString.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QString.CompareOrdinal(ref this, str);
    }
    public static implicit operator QString64(String str) {
      return new QString64(str);
    }
    public static implicit operator String(QString64 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QString.AreEqual(ref this, obj);
    }
    public Boolean Equals(QString64 str) {
      return QString.CompareOrdinal(ref this, str.bytes, str.byteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + byteCount.GetHashCode();
        fixed (Byte* p = bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.byteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QString64*)ptr;
        serializer.Stream.Serialize(&p->byteCount);
        Assert.Always(p->byteCount <= 62);
        serializer.Stream.SerializeBuffer(&p->bytes[0], p->byteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIAction : IEquatable<AssetRefAIAction>, IAssetRef<AIAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIAction(AIAction value) {
      var r = default(AssetRefAIAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIAction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboard))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboard : IEquatable<AssetRefAIBlackboard>, IAssetRef<AIBlackboard> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboard(AIBlackboard value) {
      var r = default(AssetRefAIBlackboard);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboard other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboard other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboard*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboardInitializer))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboardInitializer : IEquatable<AssetRefAIBlackboardInitializer>, IAssetRef<AIBlackboardInitializer> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboardInitializer(AIBlackboardInitializer value) {
      var r = default(AssetRefAIBlackboardInitializer);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboardInitializer other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboardInitializer other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboardInitializer*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIConfig : IEquatable<AssetRefAIConfig>, IAssetRef<AIConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIConfig(AIConfig value) {
      var r = default(AssetRefAIConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefAIConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTComposite))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTComposite : IEquatable<AssetRefBTComposite>, IAssetRef<BTComposite> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTComposite(BTComposite value) {
      var r = default(AssetRefBTComposite);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTComposite other && Equals(other);
    }
    public Boolean Equals(AssetRefBTComposite other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTComposite*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTDecorator))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTDecorator : IEquatable<AssetRefBTDecorator>, IAssetRef<BTDecorator> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTDecorator(BTDecorator value) {
      var r = default(AssetRefBTDecorator);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTDecorator other && Equals(other);
    }
    public Boolean Equals(AssetRefBTDecorator other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTDecorator*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTNode))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTNode : IEquatable<AssetRefBTNode>, IAssetRef<BTNode> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTNode(BTNode value) {
      var r = default(AssetRefBTNode);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTNode other && Equals(other);
    }
    public Boolean Equals(AssetRefBTNode other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTNode*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTRoot : IEquatable<AssetRefBTRoot>, IAssetRef<BTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTRoot(BTRoot value) {
      var r = default(AssetRefBTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefBTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTService))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTService : IEquatable<AssetRefBTService>, IAssetRef<BTService> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTService(BTService value) {
      var r = default(AssetRefBTService);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTService other && Equals(other);
    }
    public Boolean Equals(AssetRefBTService other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTService a, AssetRefBTService b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTService a, AssetRefBTService b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTService*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPRoot : IEquatable<AssetRefGOAPRoot>, IAssetRef<GOAPRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPRoot(GOAPRoot value) {
      var r = default(AssetRefGOAPRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPTask))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPTask : IEquatable<AssetRefGOAPTask>, IAssetRef<GOAPTask> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPTask(GOAPTask value) {
      var r = default(AssetRefGOAPTask);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPTask other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPTask other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPTask a, AssetRefGOAPTask b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPTask a, AssetRefGOAPTask b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPTask*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMDecision))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMDecision : IEquatable<AssetRefHFSMDecision>, IAssetRef<HFSMDecision> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMDecision(HFSMDecision value) {
      var r = default(AssetRefHFSMDecision);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMDecision other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMDecision other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMDecision*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMRoot : IEquatable<AssetRefHFSMRoot>, IAssetRef<HFSMRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMRoot(HFSMRoot value) {
      var r = default(AssetRefHFSMRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMState))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMState : IEquatable<AssetRefHFSMState>, IAssetRef<HFSMState> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMState(HFSMState value) {
      var r = default(AssetRefHFSMState);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMState other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMState other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMState*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMTransitionSet))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMTransitionSet : IEquatable<AssetRefHFSMTransitionSet>, IAssetRef<HFSMTransitionSet> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMTransitionSet(HFSMTransitionSet value) {
      var r = default(AssetRefHFSMTransitionSet);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMTransitionSet other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMTransitionSet other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMTransitionSet*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTDataIndex {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Index;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataIndex*)ptr;
        serializer.Stream.Serialize(&p->Index);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlackboardEntry {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTDecorator))]
    private Ptr ReactiveDecoratorsPtr;
    [FieldOffset(8)]
    public BlackboardValue Value;
    public QListPtr<AssetRefBTDecorator> ReactiveDecorators {
      get {
        return new QListPtr<AssetRefBTDecorator>(ReactiveDecoratorsPtr);
      }
      set {
        ReactiveDecoratorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + ReactiveDecoratorsPtr.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ReactiveDecoratorsPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardEntry*)ptr;
        QList<AssetRefBTDecorator>.Serialize(&p->ReactiveDecoratorsPtr, serializer, Quantum.AssetRefBTDecorator.Serialize);
        Quantum.BlackboardValue.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DeckDice {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 DiceId;
    [FieldOffset(4)]
    public Int32 InGameLevel;
    [FieldOffset(8)]
    public Int32 OutGameLevel;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + DiceId.GetHashCode();
        hash = hash * 31 + InGameLevel.GetHashCode();
        hash = hash * 31 + OutGameLevel.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DeckDice*)ptr;
        serializer.Stream.Serialize(&p->DiceId);
        serializer.Stream.Serialize(&p->InGameLevel);
        serializer.Stream.Serialize(&p->OutGameLevel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct FieldDice {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 DeckIndex;
    [FieldOffset(4)]
    public Int32 DiceScale;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        hash = hash * 31 + DeckIndex.GetHashCode();
        hash = hash * 31 + DiceScale.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (FieldDice*)ptr;
        serializer.Stream.Serialize(&p->DeckIndex);
        serializer.Stream.Serialize(&p->DiceScale);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPState {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int64 Negative;
    [FieldOffset(8)]
    public Int64 Positive;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 173;
        hash = hash * 31 + Negative.GetHashCode();
        hash = hash * 31 + Positive.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPState*)ptr;
        serializer.Stream.Serialize(&p->Negative);
        serializer.Stream.Serialize(&p->Positive);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMData {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefHFSMState CurrentState;
    [FieldOffset(0)]
    public AssetRefHFSMRoot Root;
    [FieldOffset(16)]
    public FP Time;
    [FieldOffset(24)]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 8)]
    private fixed Byte _Times_[64];
    public FixedArray<FP> Times {
      get {
        fixed (byte* p = _Times_) { return new FixedArray<FP>(p, 8, 8); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 179;
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Root.GetHashCode();
        hash = hash * 31 + Time.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Times);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMData*)ptr;
        Quantum.AssetRefHFSMRoot.Serialize(&p->Root, serializer);
        Quantum.AssetRefHFSMState.Serialize(&p->CurrentState, serializer);
        FP.Serialize(&p->Time, serializer);
        FixedArray<FP>.Serialize(p->Times, serializer, FP.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 181;
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RWPlayer {
    public const Int32 SIZE = 272;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef EntityRef;
    [FieldOffset(16)]
    public QString128 NickName;
    [FieldOffset(4)]
    public PlayerRef PlayerRef;
    [FieldOffset(0)]
    public Int32 Team;
    [FieldOffset(144)]
    public QString128 UserId;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + EntityRef.GetHashCode();
        hash = hash * 31 + NickName.GetHashCode();
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        hash = hash * 31 + UserId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RWPlayer*)ptr;
        serializer.Stream.Serialize(&p->Team);
        PlayerRef.Serialize(&p->PlayerRef, serializer);
        EntityRef.Serialize(&p->EntityRef, serializer);
        Quantum.QString128.Serialize(&p->NickName, serializer);
        Quantum.QString128.Serialize(&p->UserId, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1024;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(64)]
    public FP DeltaTime;
    [FieldOffset(128)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(40)]
    public QBoolean IsSuddenDeath;
    [FieldOffset(48)]
    public AssetRefMap Map;
    [FieldOffset(104)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(728)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(56)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(184)]
    [FramePrinter.FixedArrayAttribute(typeof(RWPlayer), 2)]
    private fixed Byte _Players_[544];
    [FieldOffset(112)]
    public RNGSession RngSession;
    [FieldOffset(24)]
    public Int32 SpWave;
    [FieldOffset(72)]
    public FP StartCountdown;
    [FieldOffset(28)]
    public Int32 StartCountdownInt;
    [FieldOffset(44)]
    public StateType State;
    [FieldOffset(80)]
    public FP SuddenDeathAttackSpeedFactor;
    [FieldOffset(88)]
    public FP SuddenDeathMoveSpeedFactor;
    [FieldOffset(152)]
    public BitSet256 Systems;
    [FieldOffset(32)]
    public Int32 Wave;
    [FieldOffset(96)]
    public FP WaveRemainTime;
    [FieldOffset(36)]
    public Int32 WaveTime;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[24];
    public FixedArray<RWPlayer> Players {
      get {
        fixed (byte* p = _Players_) { return new FixedArray<RWPlayer>(p, 272, 2); }
      }
    }
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 4, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 193;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + IsSuddenDeath.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Players);
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + SpWave.GetHashCode();
        hash = hash * 31 + StartCountdown.GetHashCode();
        hash = hash * 31 + StartCountdownInt.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + SuddenDeathAttackSpeedFactor.GetHashCode();
        hash = hash * 31 + SuddenDeathMoveSpeedFactor.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + Wave.GetHashCode();
        hash = hash * 31 + WaveRemainTime.GetHashCode();
        hash = hash * 31 + WaveTime.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        FixedArray<Input>.Serialize(p->input, serializer, Quantum.Input.Serialize);
        serializer.Stream.Serialize(&p->SpWave);
        serializer.Stream.Serialize(&p->StartCountdownInt);
        serializer.Stream.Serialize(&p->Wave);
        serializer.Stream.Serialize(&p->WaveTime);
        QBoolean.Serialize(&p->IsSuddenDeath, serializer);
        serializer.Stream.Serialize((Int32*)&p->State);
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        FP.Serialize(&p->StartCountdown, serializer);
        FP.Serialize(&p->SuddenDeathAttackSpeedFactor, serializer);
        FP.Serialize(&p->SuddenDeathMoveSpeedFactor, serializer);
        FP.Serialize(&p->WaveRemainTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet256.Serialize(&p->Systems, serializer);
        FixedArray<RWPlayer>.Serialize(p->Players, serializer, Quantum.RWPlayer.Serialize);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BTDataValue {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.INTVALUE)]
    private Int32 _IntValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 FPVALUE = 1;
    public const Int32 INTVALUE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntValue {
      get {
        fixed (Int32* p = &_IntValue) {
          if (_field_used_ != INTVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 197;
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _IntValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == INTVALUE) {
          serializer.Stream.Serialize(&p->_IntValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BlackboardValue {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BOOLEANVALUE)]
    private QBoolean _BooleanValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BYTEVALUE)]
    private Byte _ByteValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ENTITYREFVALUE)]
    private EntityRef _EntityRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR2VALUE)]
    private FPVector2 _FPVector2Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR3VALUE)]
    private FPVector3 _FPVector3Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.INTEGERVALUE)]
    private Int32 _IntegerValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 BOOLEANVALUE = 1;
    public const Int32 BYTEVALUE = 2;
    public const Int32 INTEGERVALUE = 3;
    public const Int32 FPVALUE = 4;
    public const Int32 FPVECTOR2VALUE = 5;
    public const Int32 FPVECTOR3VALUE = 6;
    public const Int32 ENTITYREFVALUE = 7;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public QBoolean* BooleanValue {
      get {
        fixed (QBoolean* p = &_BooleanValue) {
          if (_field_used_ != BOOLEANVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = BOOLEANVALUE;
          }
          return p;
        }
      }
    }
    public Byte* ByteValue {
      get {
        fixed (Byte* p = &_ByteValue) {
          if (_field_used_ != BYTEVALUE) {
            Native.Utils.Clear(p, 1);
            _field_used_ = BYTEVALUE;
          }
          return p;
        }
      }
    }
    public EntityRef* EntityRefValue {
      get {
        fixed (EntityRef* p = &_EntityRefValue) {
          if (_field_used_ != ENTITYREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ENTITYREFVALUE;
          }
          return p;
        }
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public FPVector2* FPVector2Value {
      get {
        fixed (FPVector2* p = &_FPVector2Value) {
          if (_field_used_ != FPVECTOR2VALUE) {
            Native.Utils.Clear(p, 16);
            _field_used_ = FPVECTOR2VALUE;
          }
          return p;
        }
      }
    }
    public FPVector3* FPVector3Value {
      get {
        fixed (FPVector3* p = &_FPVector3Value) {
          if (_field_used_ != FPVECTOR3VALUE) {
            Native.Utils.Clear(p, 24);
            _field_used_ = FPVECTOR3VALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntegerValue {
      get {
        fixed (Int32* p = &_IntegerValue) {
          if (_field_used_ != INTEGERVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTEGERVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 199;
        hash = hash * 31 + _BooleanValue.GetHashCode();
        hash = hash * 31 + _ByteValue.GetHashCode();
        hash = hash * 31 + _EntityRefValue.GetHashCode();
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _FPVector2Value.GetHashCode();
        hash = hash * 31 + _FPVector3Value.GetHashCode();
        hash = hash * 31 + _IntegerValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == BOOLEANVALUE) {
          QBoolean.Serialize(&p->_BooleanValue, serializer);
        }
        if (p->_field_used_ == BYTEVALUE) {
          serializer.Stream.Serialize(&p->_ByteValue);
        }
        if (p->_field_used_ == ENTITYREFVALUE) {
          EntityRef.Serialize(&p->_EntityRefValue, serializer);
        }
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == FPVECTOR2VALUE) {
          FPVector2.Serialize(&p->_FPVector2Value, serializer);
        }
        if (p->_field_used_ == FPVECTOR3VALUE) {
          FPVector3.Serialize(&p->_FPVector3Value, serializer);
        }
        if (p->_field_used_ == INTEGERVALUE) {
          serializer.Stream.Serialize(&p->_IntegerValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIBlackboardComponent : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIBlackboard Board;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(BlackboardEntry))]
    private Ptr EntriesPtr;
    public QListPtr<BlackboardEntry> Entries {
      get {
        return new QListPtr<BlackboardEntry>(EntriesPtr);
      }
      set {
        EntriesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 211;
        hash = hash * 31 + Board.GetHashCode();
        hash = hash * 31 + EntriesPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      EntriesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (AIBlackboardComponent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIBlackboardComponent*)ptr;
        QList<BlackboardEntry>.Serialize(&p->EntriesPtr, serializer, Quantum.BlackboardEntry.Serialize);
        Quantum.AssetRefAIBlackboard.Serialize(&p->Board, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Actor : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public PlayerRef Owner;
    [FieldOffset(0)]
    public Int32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 223;
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Actor*)ptr;
        serializer.Stream.Serialize(&p->Team);
        PlayerRef.Serialize(&p->Owner, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ActorCreation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Delay;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 227;
        hash = hash * 31 + Delay.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ActorCreation*)ptr;
        serializer.Stream.Serialize(&p->Delay);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ActorCreationSpec : Quantum.IComponent {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public ActorType ActorType;
    [FieldOffset(4)]
    public Int32 DataId;
    [FieldOffset(8)]
    public Int32 DiceScale;
    [FieldOffset(12)]
    public Int32 FieldIndex;
    [FieldOffset(16)]
    public Int32 IngameLevel;
    [FieldOffset(20)]
    public Int32 OutgameLevel;
    [FieldOffset(28)]
    public PlayerRef Owner;
    [FieldOffset(32)]
    public FPVector2 Position;
    [FieldOffset(24)]
    public Int32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 229;
        hash = hash * 31 + (Int32)ActorType;
        hash = hash * 31 + DataId.GetHashCode();
        hash = hash * 31 + DiceScale.GetHashCode();
        hash = hash * 31 + FieldIndex.GetHashCode();
        hash = hash * 31 + IngameLevel.GetHashCode();
        hash = hash * 31 + OutgameLevel.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Position.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ActorCreationSpec*)ptr;
        serializer.Stream.Serialize((Int32*)&p->ActorType);
        serializer.Stream.Serialize(&p->DataId);
        serializer.Stream.Serialize(&p->DiceScale);
        serializer.Stream.Serialize(&p->FieldIndex);
        serializer.Stream.Serialize(&p->IngameLevel);
        serializer.Stream.Serialize(&p->OutgameLevel);
        serializer.Stream.Serialize(&p->Team);
        PlayerRef.Serialize(&p->Owner, serializer);
        FPVector2.Serialize(&p->Position, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Attackable : Quantum.IComponent {
    public const Int32 SIZE = 80;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP AttackAniLength;
    [FieldOffset(8)]
    public FP AttackHitEvent;
    [FieldOffset(16)]
    public FP AttackSpeed;
    [FieldOffset(24)]
    public FP Effect;
    [FieldOffset(32)]
    public FP EffectDurationTime;
    [FieldOffset(40)]
    public FP EffectProbability;
    [FieldOffset(48)]
    public FP EffectRangeValue;
    [FieldOffset(56)]
    public FP Power;
    [FieldOffset(64)]
    public FP Range;
    [FieldOffset(72)]
    public FP SearchRange;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + AttackAniLength.GetHashCode();
        hash = hash * 31 + AttackHitEvent.GetHashCode();
        hash = hash * 31 + AttackSpeed.GetHashCode();
        hash = hash * 31 + Effect.GetHashCode();
        hash = hash * 31 + EffectDurationTime.GetHashCode();
        hash = hash * 31 + EffectProbability.GetHashCode();
        hash = hash * 31 + EffectRangeValue.GetHashCode();
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        hash = hash * 31 + SearchRange.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Attackable*)ptr;
        FP.Serialize(&p->AttackAniLength, serializer);
        FP.Serialize(&p->AttackHitEvent, serializer);
        FP.Serialize(&p->AttackSpeed, serializer);
        FP.Serialize(&p->Effect, serializer);
        FP.Serialize(&p->EffectDurationTime, serializer);
        FP.Serialize(&p->EffectProbability, serializer);
        FP.Serialize(&p->EffectRangeValue, serializer);
        FP.Serialize(&p->Power, serializer);
        FP.Serialize(&p->Range, serializer);
        FP.Serialize(&p->SearchRange, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTAgent : Quantum.IComponent {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTService))]
    private Ptr ActiveServicesPtr;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(BTDataValue))]
    private Ptr BTDataValuesPtr;
    [FieldOffset(32)]
    public AssetRefAIConfig Config;
    [FieldOffset(40)]
    public AssetRefBTNode Current;
    [FieldOffset(16)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTComposite))]
    private Ptr DynamicCompositesPtr;
    [FieldOffset(20)]
    [FramePrinter.PtrQListAttribute(typeof(Byte))]
    private Ptr NodesStatusPtr;
    [FieldOffset(24)]
    [FramePrinter.PtrQListAttribute(typeof(Int32))]
    private Ptr ServicesNextTicksPtr;
    [FieldOffset(48)]
    public AssetRefBTNode Tree;
    public QListPtr<AssetRefBTService> ActiveServices {
      get {
        return new QListPtr<AssetRefBTService>(ActiveServicesPtr);
      }
      set {
        ActiveServicesPtr = value.Ptr;
      }
    }
    public QListPtr<BTDataValue> BTDataValues {
      get {
        return new QListPtr<BTDataValue>(BTDataValuesPtr);
      }
      set {
        BTDataValuesPtr = value.Ptr;
      }
    }
    public QListPtr<AssetRefBTComposite> DynamicComposites {
      get {
        return new QListPtr<AssetRefBTComposite>(DynamicCompositesPtr);
      }
      set {
        DynamicCompositesPtr = value.Ptr;
      }
    }
    public QListPtr<Byte> NodesStatus {
      get {
        return new QListPtr<Byte>(NodesStatusPtr);
      }
      set {
        NodesStatusPtr = value.Ptr;
      }
    }
    public QListPtr<Int32> ServicesNextTicks {
      get {
        return new QListPtr<Int32>(ServicesNextTicksPtr);
      }
      set {
        ServicesNextTicksPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 239;
        hash = hash * 31 + ActiveServicesPtr.GetHashCode();
        hash = hash * 31 + BTDataValuesPtr.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Current.GetHashCode();
        hash = hash * 31 + DynamicCompositesPtr.GetHashCode();
        hash = hash * 31 + NodesStatusPtr.GetHashCode();
        hash = hash * 31 + ServicesNextTicksPtr.GetHashCode();
        hash = hash * 31 + Tree.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ActiveServicesPtr = default;
      BTDataValuesPtr = default;
      DynamicCompositesPtr = default;
      NodesStatusPtr = default;
      ServicesNextTicksPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (BTAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTAgent*)ptr;
        QList<AssetRefBTService>.Serialize(&p->ActiveServicesPtr, serializer, Quantum.AssetRefBTService.Serialize);
        QList<BTDataValue>.Serialize(&p->BTDataValuesPtr, serializer, Quantum.BTDataValue.Serialize);
        QList<AssetRefBTComposite>.Serialize(&p->DynamicCompositesPtr, serializer, Quantum.AssetRefBTComposite.Serialize);
        QList<Byte>.Serialize(&p->NodesStatusPtr, serializer, (v, s) => {{ s.Stream.Serialize((Byte*)v); }});
        QList<Int32>.Serialize(&p->ServicesNextTicksPtr, serializer, (v, s) => {{ s.Stream.Serialize((Int32*)v); }});
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Current, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Tree, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Boss : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 BossIndex;
    [FieldOffset(4)]
    public Int32 BossInfoId;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 241;
        hash = hash * 31 + BossIndex.GetHashCode();
        hash = hash * 31 + BossInfoId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Boss*)ptr;
        serializer.Stream.Serialize(&p->BossIndex);
        serializer.Stream.Serialize(&p->BossInfoId);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Buff : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 BuffState;
    [FieldOffset(4)]
    public Int32 BuffStateApplied;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 251;
        hash = hash * 31 + BuffState.GetHashCode();
        hash = hash * 31 + BuffStateApplied.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Buff*)ptr;
        serializer.Stream.Serialize(&p->BuffState);
        serializer.Stream.Serialize(&p->BuffStateApplied);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DamagePerSec : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Damage;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 257;
        hash = hash * 31 + Damage.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DamagePerSec*)ptr;
        FP.Serialize(&p->Damage, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Deck : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [FramePrinter.FixedArrayAttribute(typeof(DeckDice), 5)]
    private fixed Byte _Dices_[60];
    [FieldOffset(0)]
    public Int32 GuardianId;
    public FixedArray<DeckDice> Dices {
      get {
        fixed (byte* p = _Dices_) { return new FixedArray<DeckDice>(p, 12, 5); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 263;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Dices);
        hash = hash * 31 + GuardianId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Deck*)ptr;
        serializer.Stream.Serialize(&p->GuardianId);
        FixedArray<DeckDice>.Serialize(p->Dices, serializer, Quantum.DeckDice.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Destroy : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 269;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Destroy*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Dice : Quantum.IComponent {
    public const Int32 SIZE = 20;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 DiceInfoId;
    [FieldOffset(4)]
    public Int32 DiceScale;
    [FieldOffset(8)]
    public Int32 FieldIndex;
    [FieldOffset(12)]
    public Int32 IngameUpgradeLevel;
    [FieldOffset(16)]
    public Int32 OutgameUpgradeLevel;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 271;
        hash = hash * 31 + DiceInfoId.GetHashCode();
        hash = hash * 31 + DiceScale.GetHashCode();
        hash = hash * 31 + FieldIndex.GetHashCode();
        hash = hash * 31 + IngameUpgradeLevel.GetHashCode();
        hash = hash * 31 + OutgameUpgradeLevel.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Dice*)ptr;
        serializer.Stream.Serialize(&p->DiceInfoId);
        serializer.Stream.Serialize(&p->DiceScale);
        serializer.Stream.Serialize(&p->FieldIndex);
        serializer.Stream.Serialize(&p->IngameUpgradeLevel);
        serializer.Stream.Serialize(&p->OutgameUpgradeLevel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DiceCreation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Count;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 277;
        hash = hash * 31 + Count.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DiceCreation*)ptr;
        serializer.Stream.Serialize(&p->Count);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Field : Quantum.IComponent {
    public const Int32 SIZE = 120;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(FieldDice), 15)]
    private fixed Byte _Dices_[120];
    public FixedArray<FieldDice> Dices {
      get {
        fixed (byte* p = _Dices_) { return new FixedArray<FieldDice>(p, 8, 15); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 281;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Dices);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Field*)ptr;
        FixedArray<FieldDice>.Serialize(p->Dices, serializer, Quantum.FieldDice.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Frozen : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP EndTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 283;
        hash = hash * 31 + EndTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Frozen*)ptr;
        FP.Serialize(&p->EndTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPAgent : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIConfig Config;
    [FieldOffset(48)]
    public Int64 CurrentState;
    [FieldOffset(0)]
    public Int32 CurrentTaskIndex;
    [FieldOffset(56)]
    public GOAPState Goal;
    [FieldOffset(16)]
    [FramePrinter.FixedArrayAttribute(typeof(AssetRefGOAPTask), 4)]
    private fixed Byte _Plan_[32];
    [FieldOffset(4)]
    public Int32 TaskCount;
    public FixedArray<AssetRefGOAPTask> Plan {
      get {
        fixed (byte* p = _Plan_) { return new FixedArray<AssetRefGOAPTask>(p, 8, 4); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 293;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + CurrentTaskIndex.GetHashCode();
        hash = hash * 31 + Goal.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Plan);
        hash = hash * 31 + TaskCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPAgent*)ptr;
        serializer.Stream.Serialize(&p->CurrentTaskIndex);
        serializer.Stream.Serialize(&p->TaskCount);
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        FixedArray<AssetRefGOAPTask>.Serialize(p->Plan, serializer, Quantum.AssetRefGOAPTask.Serialize);
        serializer.Stream.Serialize(&p->CurrentState);
        Quantum.GOAPState.Serialize(&p->Goal, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Guardian : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 GuardianInfoId;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 307;
        hash = hash * 31 + GuardianInfoId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Guardian*)ptr;
        serializer.Stream.Serialize(&p->GuardianInfoId);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMAgent : Quantum.IComponent {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAIConfig Config;
    [FieldOffset(8)]
    public HFSMData Data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 311;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMAgent*)ptr;
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.HFSMData.Serialize(&p->Data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Health : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP MaxValue;
    [FieldOffset(8)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 313;
        hash = hash * 31 + MaxValue.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Health*)ptr;
        FP.Serialize(&p->MaxValue, serializer);
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Hittable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 317;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Hittable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Mine : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP ArriveTime;
    [FieldOffset(0)]
    public QBoolean Arrived;
    [FieldOffset(32)]
    public FPVector2 Destination;
    [FieldOffset(16)]
    public FP SpawnTime;
    [FieldOffset(24)]
    public FP SpawnVertical;
    [FieldOffset(48)]
    public FPVector2 StartPosition;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 331;
        hash = hash * 31 + ArriveTime.GetHashCode();
        hash = hash * 31 + Arrived.GetHashCode();
        hash = hash * 31 + Destination.GetHashCode();
        hash = hash * 31 + SpawnTime.GetHashCode();
        hash = hash * 31 + SpawnVertical.GetHashCode();
        hash = hash * 31 + StartPosition.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Mine*)ptr;
        QBoolean.Serialize(&p->Arrived, serializer);
        FP.Serialize(&p->ArriveTime, serializer);
        FP.Serialize(&p->SpawnTime, serializer);
        FP.Serialize(&p->SpawnVertical, serializer);
        FPVector2.Serialize(&p->Destination, serializer);
        FPVector2.Serialize(&p->StartPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Movable : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP MoveSpeed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 337;
        hash = hash * 31 + MoveSpeed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Movable*)ptr;
        FP.Serialize(&p->MoveSpeed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct NoCC : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 347;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (NoCC*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerBot : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 349;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerBot*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Projectile : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 353;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Projectile*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProjectileCreation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 359;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectileCreation*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProjectileSpec : Quantum.IComponent {
    public const Int32 SIZE = 184;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public EntityRef Attacker;
    [FieldOffset(0)]
    public DebuffType Debuff;
    [FieldOffset(32)]
    public FP DebuffDuration;
    [FieldOffset(24)]
    public EntityRef Defender;
    [FieldOffset(56)]
    public QString64 HitEffect;
    [FieldOffset(40)]
    public FP HitTime;
    [FieldOffset(120)]
    public QString64 Model;
    [FieldOffset(8)]
    public PlayerRef Owner;
    [FieldOffset(48)]
    public FP Power;
    [FieldOffset(4)]
    public Int32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 367;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + (Int32)Debuff;
        hash = hash * 31 + DebuffDuration.GetHashCode();
        hash = hash * 31 + Defender.GetHashCode();
        hash = hash * 31 + HitEffect.GetHashCode();
        hash = hash * 31 + HitTime.GetHashCode();
        hash = hash * 31 + Model.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectileSpec*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Debuff);
        serializer.Stream.Serialize(&p->Team);
        PlayerRef.Serialize(&p->Owner, serializer);
        EntityRef.Serialize(&p->Attacker, serializer);
        EntityRef.Serialize(&p->Defender, serializer);
        FP.Serialize(&p->DebuffDuration, serializer);
        FP.Serialize(&p->HitTime, serializer);
        FP.Serialize(&p->Power, serializer);
        Quantum.QString64.Serialize(&p->HitEffect, serializer);
        Quantum.QString64.Serialize(&p->Model, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Shield : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP EndTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 373;
        hash = hash * 31 + EndTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Shield*)ptr;
        FP.Serialize(&p->EndTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Skill : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP AvailableTime;
    [FieldOffset(8)]
    public FP CoolTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 379;
        hash = hash * 31 + AvailableTime.GetHashCode();
        hash = hash * 31 + CoolTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Skill*)ptr;
        FP.Serialize(&p->AvailableTime, serializer);
        FP.Serialize(&p->CoolTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Sp : Quantum.IComponent {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 CommingSp;
    [FieldOffset(4)]
    public Int32 CommingSpGrade;
    [FieldOffset(8)]
    public Int32 CurrentSp;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 383;
        hash = hash * 31 + CommingSp.GetHashCode();
        hash = hash * 31 + CommingSpGrade.GetHashCode();
        hash = hash * 31 + CurrentSp.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Sp*)ptr;
        serializer.Stream.Serialize(&p->CommingSp);
        serializer.Stream.Serialize(&p->CommingSpGrade);
        serializer.Stream.Serialize(&p->CurrentSp);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StoneBall : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 389;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StoneBall*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Taunted : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP EndTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 397;
        hash = hash * 31 + EndTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Taunted*)ptr;
        FP.Serialize(&p->EndTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Tower : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 401;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Tower*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Trigger : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 409;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Trigger*)ptr;
    }
  }
  public unsafe partial class Frame {
    private ISignalOnSpWave[] _ISignalOnSpWaveSystems;
    private ISignalOnWave[] _ISignalOnWaveSystems;
    private ISignalOnTowerDestroyed[] _ISignalOnTowerDestroyedSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIBlackboardComponent>(Quantum.AIBlackboardComponent.Serialize, null, Quantum.AIBlackboardComponent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Actor>(Quantum.Actor.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ActorCreation>(Quantum.ActorCreation.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ActorCreationSpec>(Quantum.ActorCreationSpec.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Attackable>(Quantum.Attackable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BTAgent>(Quantum.BTAgent.Serialize, null, Quantum.BTAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Boss>(Quantum.Boss.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Buff>(Quantum.Buff.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.DamagePerSec>(Quantum.DamagePerSec.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Deck>(Quantum.Deck.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Destroy>(Quantum.Destroy.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Dice>(Quantum.Dice.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.DiceCreation>(Quantum.DiceCreation.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Field>(Quantum.Field.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Frozen>(Quantum.Frozen.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.GOAPAgent>(Quantum.GOAPAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Guardian>(Quantum.Guardian.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.HFSMAgent>(Quantum.HFSMAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Health>(Quantum.Health.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Hittable>(Quantum.Hittable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Mine>(Quantum.Mine.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Movable>(Quantum.Movable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.NoCC>(Quantum.NoCC.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerBot>(Quantum.PlayerBot.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Projectile>(Quantum.Projectile.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ProjectileCreation>(Quantum.ProjectileCreation.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ProjectileSpec>(Quantum.ProjectileSpec.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Shield>(Quantum.Shield.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Skill>(Quantum.Skill.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Sp>(Quantum.Sp.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.StoneBall>(Quantum.StoneBall.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Taunted>(Quantum.Taunted.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Tower>(Quantum.Tower.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Trigger>(Quantum.Trigger.Serialize, null, null, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ISignalOnSpWaveSystems = BuildSignalsArray<ISignalOnSpWave>();
      _ISignalOnWaveSystems = BuildSignalsArray<ISignalOnWave>();
      _ISignalOnTowerDestroyedSystems = BuildSignalsArray<ISignalOnTowerDestroyed>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Actor>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Actor>();
      BuildSignalsArrayOnComponentAdded<Quantum.ActorCreation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ActorCreation>();
      BuildSignalsArrayOnComponentAdded<Quantum.ActorCreationSpec>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ActorCreationSpec>();
      BuildSignalsArrayOnComponentAdded<Quantum.Attackable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Attackable>();
      BuildSignalsArrayOnComponentAdded<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Boss>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Boss>();
      BuildSignalsArrayOnComponentAdded<Quantum.Buff>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Buff>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.DamagePerSec>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DamagePerSec>();
      BuildSignalsArrayOnComponentAdded<Quantum.Deck>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Deck>();
      BuildSignalsArrayOnComponentAdded<Quantum.Destroy>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Destroy>();
      BuildSignalsArrayOnComponentAdded<Quantum.Dice>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Dice>();
      BuildSignalsArrayOnComponentAdded<Quantum.DiceCreation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DiceCreation>();
      BuildSignalsArrayOnComponentAdded<Quantum.Field>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Field>();
      BuildSignalsArrayOnComponentAdded<Quantum.Frozen>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Frozen>();
      BuildSignalsArrayOnComponentAdded<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Guardian>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Guardian>();
      BuildSignalsArrayOnComponentAdded<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Health>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Health>();
      BuildSignalsArrayOnComponentAdded<Quantum.Hittable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Hittable>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.Mine>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Mine>();
      BuildSignalsArrayOnComponentAdded<Quantum.Movable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Movable>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.NoCC>();
      BuildSignalsArrayOnComponentRemoved<Quantum.NoCC>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerBot>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerBot>();
      BuildSignalsArrayOnComponentAdded<Quantum.Projectile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Projectile>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProjectileCreation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProjectileCreation>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProjectileSpec>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProjectileSpec>();
      BuildSignalsArrayOnComponentAdded<Quantum.Shield>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Shield>();
      BuildSignalsArrayOnComponentAdded<Quantum.Skill>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Skill>();
      BuildSignalsArrayOnComponentAdded<Quantum.Sp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Sp>();
      BuildSignalsArrayOnComponentAdded<Quantum.StoneBall>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StoneBall>();
      BuildSignalsArrayOnComponentAdded<Quantum.Taunted>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Taunted>();
      BuildSignalsArrayOnComponentAdded<Quantum.Tower>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Tower>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Trigger>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Trigger>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
      public void OnSpWave(Int32 wave, Int32 spWave) {
        var array = _f._ISignalOnSpWaveSystems;
        var systems = &(_f._globals->Systems);
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (systems->IsSet(s.RuntimeIndex)) {
            s.OnSpWave(_f, wave, spWave);
          }
        }
      }
      public void OnWave(Int32 wave) {
        var array = _f._ISignalOnWaveSystems;
        var systems = &(_f._globals->Systems);
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (systems->IsSet(s.RuntimeIndex)) {
            s.OnWave(_f, wave);
          }
        }
      }
      public void OnTowerDestroyed(EntityRef Entity) {
        var array = _f._ISignalOnTowerDestroyedSystems;
        var systems = &(_f._globals->Systems);
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (systems->IsSet(s.RuntimeIndex)) {
            s.OnTowerDestroyed(_f, Entity);
          }
        }
      }
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 22;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          case EventFieldDiceCreated.ID: return EventLocalPlayerOnly.ID;
          case EventFieldDiceMerged.ID: return EventLocalPlayerOnly.ID;
          case EventPlayerInitialized.ID: return EventLocalPlayerOnly.ID;
          case EventPoweredDeckDiceUp.ID: return EventLocalPlayerOnly.ID;
          case EventSpIncreased.ID: return EventLocalPlayerOnly.ID;
          case EventSpDecreased.ID: return EventLocalPlayerOnly.ID;
          case EventCommingSpGradeUpgraded.ID: return EventLocalPlayerOnly.ID;
          case EventCommingSpChanged.ID: return EventLocalPlayerOnly.ID;
          case EventCommingSpGradeChanged.ID: return EventLocalPlayerOnly.ID;
          case EventDiceCreationCountChanged.ID: return EventLocalPlayerOnly.ID;
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventFieldDiceCreated.ID: return typeof(EventFieldDiceCreated);
          case EventFieldDiceMerged.ID: return typeof(EventFieldDiceMerged);
          case EventLocalPlayerOnly.ID: return typeof(EventLocalPlayerOnly);
          case EventPlayerInitialized.ID: return typeof(EventPlayerInitialized);
          case EventPoweredDeckDiceUp.ID: return typeof(EventPoweredDeckDiceUp);
          case EventSpIncreased.ID: return typeof(EventSpIncreased);
          case EventSpDecreased.ID: return typeof(EventSpDecreased);
          case EventCommingSpGradeUpgraded.ID: return typeof(EventCommingSpGradeUpgraded);
          case EventCommingSpChanged.ID: return typeof(EventCommingSpChanged);
          case EventCommingSpGradeChanged.ID: return typeof(EventCommingSpGradeChanged);
          case EventDiceCreationCountChanged.ID: return typeof(EventDiceCreationCountChanged);
          case EventCountDown.ID: return typeof(EventCountDown);
          case EventOnWaveChanged.ID: return typeof(EventOnWaveChanged);
          case EventOnSuddenDeathStarted.ID: return typeof(EventOnSuddenDeathStarted);
          case EventActionChangedWithSpeed.ID: return typeof(EventActionChangedWithSpeed);
          case EventActionChanged.ID: return typeof(EventActionChanged);
          case EventActorHitted.ID: return typeof(EventActorHitted);
          case EventAnimationTrigger.ID: return typeof(EventAnimationTrigger);
          case EventPlayCasterEffect.ID: return typeof(EventPlayCasterEffect);
          case EventBuffStateChanged.ID: return typeof(EventBuffStateChanged);
          case EventPlaySound.ID: return typeof(EventPlaySound);
          case EventGameOver.ID: return typeof(EventGameOver);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventFieldDiceCreated FieldDiceCreated(PlayerRef Player, Int32 FieldIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventFieldDiceCreated>(EventFieldDiceCreated.ID);
        ev.Player = Player;
        ev.FieldIndex = FieldIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventFieldDiceMerged FieldDiceMerged(PlayerRef Player, Int32 SourceFieldIndex, Int32 TargetFieldIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventFieldDiceMerged>(EventFieldDiceMerged.ID);
        ev.Player = Player;
        ev.SourceFieldIndex = SourceFieldIndex;
        ev.TargetFieldIndex = TargetFieldIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerInitialized PlayerInitialized(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerInitialized>(EventPlayerInitialized.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPoweredDeckDiceUp PoweredDeckDiceUp(PlayerRef Player, Int32 DeckIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventPoweredDeckDiceUp>(EventPoweredDeckDiceUp.ID);
        ev.Player = Player;
        ev.DeckIndex = DeckIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventSpIncreased SpIncreased(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventSpIncreased>(EventSpIncreased.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventSpDecreased SpDecreased(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventSpDecreased>(EventSpDecreased.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCommingSpGradeUpgraded CommingSpGradeUpgraded(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventCommingSpGradeUpgraded>(EventCommingSpGradeUpgraded.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCommingSpChanged CommingSpChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventCommingSpChanged>(EventCommingSpChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCommingSpGradeChanged CommingSpGradeChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventCommingSpGradeChanged>(EventCommingSpGradeChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDiceCreationCountChanged DiceCreationCountChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventDiceCreationCountChanged>(EventDiceCreationCountChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCountDown CountDown(Int32 Count) {
        var ev = _f.Context.AcquireEvent<EventCountDown>(EventCountDown.ID);
        ev.Count = Count;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnWaveChanged OnWaveChanged() {
        var ev = _f.Context.AcquireEvent<EventOnWaveChanged>(EventOnWaveChanged.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnSuddenDeathStarted OnSuddenDeathStarted() {
        var ev = _f.Context.AcquireEvent<EventOnSuddenDeathStarted>(EventOnSuddenDeathStarted.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventActionChangedWithSpeed ActionChangedWithSpeed(EntityRef Entity, ActionStateType State, FP Speed) {
        var ev = _f.Context.AcquireEvent<EventActionChangedWithSpeed>(EventActionChangedWithSpeed.ID);
        ev.Entity = Entity;
        ev.State = State;
        ev.Speed = Speed;
        _f.AddEvent(ev);
        return ev;
      }
      public EventActionChanged ActionChanged(EntityRef Entity, ActionStateType State) {
        var ev = _f.Context.AcquireEvent<EventActionChanged>(EventActionChanged.ID);
        ev.Entity = Entity;
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventActorHitted ActorHitted(EntityRef Attacker, EntityRef Victim, HitColor HitColor) {
        var ev = _f.Context.AcquireEvent<EventActorHitted>(EventActorHitted.ID);
        ev.Attacker = Attacker;
        ev.Victim = Victim;
        ev.HitColor = HitColor;
        _f.AddEvent(ev);
        return ev;
      }
      public EventAnimationTrigger AnimationTrigger(EntityRef Actor, QString64 Trigger) {
        var ev = _f.Context.AcquireEvent<EventAnimationTrigger>(EventAnimationTrigger.ID);
        ev.Actor = Actor;
        ev.Trigger = Trigger;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayCasterEffect PlayCasterEffect(EntityRef Caster, QString64 AssetName) {
        var ev = _f.Context.AcquireEvent<EventPlayCasterEffect>(EventPlayCasterEffect.ID);
        ev.Caster = Caster;
        ev.AssetName = AssetName;
        _f.AddEvent(ev);
        return ev;
      }
      public EventBuffStateChanged BuffStateChanged(EntityRef Entity, Int32 BuffState) {
        var ev = _f.Context.AcquireEvent<EventBuffStateChanged>(EventBuffStateChanged.ID);
        ev.Entity = Entity;
        ev.BuffState = BuffState;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlaySound PlaySound(EntityRef Actor, QString128 AssetName) {
        var ev = _f.Context.AcquireEvent<EventPlaySound>(EventPlaySound.ID);
        ev.Actor = Actor;
        ev.AssetName = AssetName;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameOver GameOver() {
        var ev = _f.Context.AcquireEvent<EventGameOver>(EventGameOver.ID);
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public BTNode BTNode(AssetRefBTNode assetRef) {
         return _f.FindAsset<BTNode>(assetRef.Id);
      }
      public BTService BTService(AssetRefBTService assetRef) {
         return _f.FindAsset<BTService>(assetRef.Id);
      }
      public BTComposite BTComposite(AssetRefBTComposite assetRef) {
         return _f.FindAsset<BTComposite>(assetRef.Id);
      }
      public BTDecorator BTDecorator(AssetRefBTDecorator assetRef) {
         return _f.FindAsset<BTDecorator>(assetRef.Id);
      }
      public BTRoot BTRoot(AssetRefBTRoot assetRef) {
         return _f.FindAsset<BTRoot>(assetRef.Id);
      }
      public AIAction AIAction(AssetRefAIAction assetRef) {
         return _f.FindAsset<AIAction>(assetRef.Id);
      }
      public AIConfig AIConfig(AssetRefAIConfig assetRef) {
         return _f.FindAsset<AIConfig>(assetRef.Id);
      }
      public GOAPTask GOAPTask(AssetRefGOAPTask assetRef) {
         return _f.FindAsset<GOAPTask>(assetRef.Id);
      }
      public GOAPRoot GOAPRoot(AssetRefGOAPRoot assetRef) {
         return _f.FindAsset<GOAPRoot>(assetRef.Id);
      }
      public HFSMRoot HFSMRoot(AssetRefHFSMRoot assetRef) {
         return _f.FindAsset<HFSMRoot>(assetRef.Id);
      }
      public HFSMState HFSMState(AssetRefHFSMState assetRef) {
         return _f.FindAsset<HFSMState>(assetRef.Id);
      }
      public HFSMDecision HFSMDecision(AssetRefHFSMDecision assetRef) {
         return _f.FindAsset<HFSMDecision>(assetRef.Id);
      }
      public HFSMTransitionSet HFSMTransitionSet(AssetRefHFSMTransitionSet assetRef) {
         return _f.FindAsset<HFSMTransitionSet>(assetRef.Id);
      }
      public AIBlackboard AIBlackboard(AssetRefAIBlackboard assetRef) {
         return _f.FindAsset<AIBlackboard>(assetRef.Id);
      }
      public AIBlackboardInitializer AIBlackboardInitializer(AssetRefAIBlackboardInitializer assetRef) {
         return _f.FindAsset<AIBlackboardInitializer>(assetRef.Id);
      }
    }
  }
  public unsafe interface ISignalOnSpWave : ISignal {
    void OnSpWave(Frame f, Int32 wave, Int32 spWave);
  }
  public unsafe interface ISignalOnWave : ISignal {
    void OnWave(Frame f, Int32 wave);
  }
  public unsafe interface ISignalOnTowerDestroyed : ISignal {
    void OnTowerDestroyed(Frame f, EntityRef Entity);
  }
  public unsafe partial class EventFieldDiceCreated : EventLocalPlayerOnly {
    public new const Int32 ID = 0;
    public Int32 FieldIndex;
    protected EventFieldDiceCreated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventFieldDiceCreated() : 
        base(0, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + FieldIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventFieldDiceMerged : EventLocalPlayerOnly {
    public new const Int32 ID = 1;
    public Int32 SourceFieldIndex;
    public Int32 TargetFieldIndex;
    protected EventFieldDiceMerged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventFieldDiceMerged() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + SourceFieldIndex.GetHashCode();
        hash = hash * 31 + TargetFieldIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe abstract partial class EventLocalPlayerOnly : EventBase {
    public new const Int32 ID = 2;
    public PlayerRef Player;
    protected EventLocalPlayerOnly(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerInitialized : EventLocalPlayerOnly {
    public new const Int32 ID = 3;
    protected EventPlayerInitialized(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerInitialized() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPoweredDeckDiceUp : EventLocalPlayerOnly {
    public new const Int32 ID = 4;
    public Int32 DeckIndex;
    protected EventPoweredDeckDiceUp(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPoweredDeckDiceUp() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + DeckIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventSpIncreased : EventLocalPlayerOnly {
    public new const Int32 ID = 5;
    protected EventSpIncreased(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventSpIncreased() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventSpDecreased : EventLocalPlayerOnly {
    public new const Int32 ID = 6;
    protected EventSpDecreased(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventSpDecreased() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpGradeUpgraded : EventLocalPlayerOnly {
    public new const Int32 ID = 7;
    protected EventCommingSpGradeUpgraded(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCommingSpGradeUpgraded() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpChanged : EventLocalPlayerOnly {
    public new const Int32 ID = 8;
    protected EventCommingSpChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCommingSpChanged() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpGradeChanged : EventLocalPlayerOnly {
    public new const Int32 ID = 9;
    protected EventCommingSpGradeChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCommingSpGradeChanged() : 
        base(9, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDiceCreationCountChanged : EventLocalPlayerOnly {
    public new const Int32 ID = 10;
    protected EventDiceCreationCountChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDiceCreationCountChanged() : 
        base(10, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCountDown : EventBase {
    public new const Int32 ID = 11;
    public Int32 Count;
    protected EventCountDown(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCountDown() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + Count.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnWaveChanged : EventBase {
    public new const Int32 ID = 12;
    protected EventOnWaveChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnWaveChanged() : 
        base(12, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnSuddenDeathStarted : EventBase {
    public new const Int32 ID = 13;
    protected EventOnSuddenDeathStarted(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnSuddenDeathStarted() : 
        base(13, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        return hash;
      }
    }
  }
  public unsafe partial class EventActionChangedWithSpeed : EventBase {
    public new const Int32 ID = 14;
    public EntityRef Entity;
    public ActionStateType State;
    public FP Speed;
    protected EventActionChangedWithSpeed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventActionChangedWithSpeed() : 
        base(14, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + State.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventActionChanged : EventBase {
    public new const Int32 ID = 15;
    public EntityRef Entity;
    public ActionStateType State;
    protected EventActionChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventActionChanged() : 
        base(15, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 103;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventActorHitted : EventBase {
    public new const Int32 ID = 16;
    public EntityRef Attacker;
    public EntityRef Victim;
    public HitColor HitColor;
    protected EventActorHitted(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventActorHitted() : 
        base(16, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 107;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + Victim.GetHashCode();
        hash = hash * 31 + HitColor.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventAnimationTrigger : EventBase {
    public new const Int32 ID = 17;
    public EntityRef Actor;
    public QString64 Trigger;
    protected EventAnimationTrigger(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventAnimationTrigger() : 
        base(17, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 109;
        hash = hash * 31 + Actor.GetHashCode();
        hash = hash * 31 + Trigger.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayCasterEffect : EventBase {
    public new const Int32 ID = 18;
    public EntityRef Caster;
    public QString64 AssetName;
    protected EventPlayCasterEffect(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayCasterEffect() : 
        base(18, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 113;
        hash = hash * 31 + Caster.GetHashCode();
        hash = hash * 31 + AssetName.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventBuffStateChanged : EventBase {
    public new const Int32 ID = 19;
    public EntityRef Entity;
    public Int32 BuffState;
    protected EventBuffStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventBuffStateChanged() : 
        base(19, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 127;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + BuffState.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlaySound : EventBase {
    public new const Int32 ID = 20;
    public EntityRef Actor;
    public QString128 AssetName;
    protected EventPlaySound(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlaySound() : 
        base(20, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 131;
        hash = hash * 31 + Actor.GetHashCode();
        hash = hash * 31 + AssetName.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameOver : EventBase {
    public new const Int32 ID = 21;
    protected EventGameOver(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameOver() : 
        base(21, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 137;
        return hash;
      }
    }
  }
  #region BitStreamExtensions
  static
  public unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefAIAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboard value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboardInitializer value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTComposite value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTDecorator value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTNode value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTService value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPTask value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMDecision value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMState value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMTransitionSet value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  #endregion
  [System.SerializableAttribute()]
  public unsafe partial class BTNode : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTService : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIConfig : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPTask : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMState : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMDecision : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMTransitionSet : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboard : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboardInitializer : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Actor_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ActorCreation_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ActorCreationSpec_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Attackable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Boss_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Buff_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.DamagePerSec_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Deck_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Destroy_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Dice_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.DiceCreation_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Field_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Frozen_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GOAPAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Guardian_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HFSMAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Health_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Hittable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Mine_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Movable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.NoCC_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerBot_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Projectile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ProjectileCreation_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ProjectileSpec_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Shield_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Skill_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Sp_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.StoneBall_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Taunted_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Tower_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Trigger_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
    public const Int32 PLAYERS_MAX = 2;
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIBlackboardComponent), Quantum.AIBlackboardComponent.SIZE);
      Register(typeof(Quantum.ActionStateType), 4);
      Register(typeof(Quantum.Actor), Quantum.Actor.SIZE);
      Register(typeof(Quantum.ActorCreation), Quantum.ActorCreation.SIZE);
      Register(typeof(Quantum.ActorCreationSpec), Quantum.ActorCreationSpec.SIZE);
      Register(typeof(Quantum.ActorType), 4);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(Quantum.AssetRefAIAction), Quantum.AssetRefAIAction.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboard), Quantum.AssetRefAIBlackboard.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboardInitializer), Quantum.AssetRefAIBlackboardInitializer.SIZE);
      Register(typeof(Quantum.AssetRefAIConfig), Quantum.AssetRefAIConfig.SIZE);
      Register(typeof(Quantum.AssetRefBTComposite), Quantum.AssetRefBTComposite.SIZE);
      Register(typeof(Quantum.AssetRefBTDecorator), Quantum.AssetRefBTDecorator.SIZE);
      Register(typeof(Quantum.AssetRefBTNode), Quantum.AssetRefBTNode.SIZE);
      Register(typeof(Quantum.AssetRefBTRoot), Quantum.AssetRefBTRoot.SIZE);
      Register(typeof(Quantum.AssetRefBTService), Quantum.AssetRefBTService.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGOAPRoot), Quantum.AssetRefGOAPRoot.SIZE);
      Register(typeof(Quantum.AssetRefGOAPTask), Quantum.AssetRefGOAPTask.SIZE);
      Register(typeof(Quantum.AssetRefHFSMDecision), Quantum.AssetRefHFSMDecision.SIZE);
      Register(typeof(Quantum.AssetRefHFSMRoot), Quantum.AssetRefHFSMRoot.SIZE);
      Register(typeof(Quantum.AssetRefHFSMState), Quantum.AssetRefHFSMState.SIZE);
      Register(typeof(Quantum.AssetRefHFSMTransitionSet), Quantum.AssetRefHFSMTransitionSet.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.Attackable), Quantum.Attackable.SIZE);
      Register(typeof(Quantum.BTAgent), Quantum.BTAgent.SIZE);
      Register(typeof(Quantum.BTDataIndex), Quantum.BTDataIndex.SIZE);
      Register(typeof(Quantum.BTDataValue), Quantum.BTDataValue.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Quantum.BlackboardEntry), Quantum.BlackboardEntry.SIZE);
      Register(typeof(Quantum.BlackboardValue), Quantum.BlackboardValue.SIZE);
      Register(typeof(Quantum.Boss), Quantum.Boss.SIZE);
      Register(typeof(Quantum.Buff), Quantum.Buff.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(Quantum.DamagePerSec), Quantum.DamagePerSec.SIZE);
      Register(typeof(Quantum.DebuffType), 4);
      Register(typeof(Quantum.Deck), Quantum.Deck.SIZE);
      Register(typeof(Quantum.DeckDice), Quantum.DeckDice.SIZE);
      Register(typeof(Quantum.Destroy), Quantum.Destroy.SIZE);
      Register(typeof(Quantum.Dice), Quantum.Dice.SIZE);
      Register(typeof(Quantum.DiceCreation), Quantum.DiceCreation.SIZE);
      Register(typeof(Quantum.DiceType), 4);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(Quantum.Field), Quantum.Field.SIZE);
      Register(typeof(Quantum.FieldDice), Quantum.FieldDice.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.Frozen), Quantum.Frozen.SIZE);
      Register(typeof(Quantum.GOAPAgent), Quantum.GOAPAgent.SIZE);
      Register(typeof(Quantum.GOAPState), Quantum.GOAPState.SIZE);
      Register(typeof(Quantum.GOAPWorldState), 8);
      Register(typeof(Quantum.Guardian), Quantum.Guardian.SIZE);
      Register(typeof(Quantum.HFSMAgent), Quantum.HFSMAgent.SIZE);
      Register(typeof(Quantum.HFSMData), Quantum.HFSMData.SIZE);
      Register(typeof(Quantum.Health), Quantum.Health.SIZE);
      Register(typeof(Quantum.HitColor), 4);
      Register(typeof(Quantum.Hittable), Quantum.Hittable.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(Quantum.Mine), Quantum.Mine.SIZE);
      Register(typeof(Quantum.Movable), Quantum.Movable.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(Quantum.NoCC), Quantum.NoCC.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.PlayerBot), Quantum.PlayerBot.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.Projectile), Quantum.Projectile.SIZE);
      Register(typeof(Quantum.ProjectileCreation), Quantum.ProjectileCreation.SIZE);
      Register(typeof(Quantum.ProjectileSpec), Quantum.ProjectileSpec.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.QString128), Quantum.QString128.SIZE);
      Register(typeof(Quantum.QString64), Quantum.QString64.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Quantum.RWPlayer), Quantum.RWPlayer.SIZE);
      Register(typeof(Quantum.Shield), Quantum.Shield.SIZE);
      Register(typeof(Quantum.Skill), Quantum.Skill.SIZE);
      Register(typeof(Quantum.Sp), Quantum.Sp.SIZE);
      Register(typeof(Quantum.StateType), 4);
      Register(typeof(Quantum.StoneBall), Quantum.StoneBall.SIZE);
      Register(typeof(Quantum.Taunted), Quantum.Taunted.SIZE);
      Register(typeof(Quantum.Tower), Quantum.Tower.SIZE);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(Quantum.Trigger), Quantum.Trigger.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ActionStateType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ActorType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboard>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboardInitializer>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTComposite>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTDecorator>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTNode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTService>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPTask>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMDecision>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMTransitionSet>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.DebuffType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.DiceType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GOAPWorldState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.HitColor>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.StateType>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(ActionStateType))]
  public unsafe partial struct ActionStateType_Prototype {
    public Int32 Value;
    public static implicit operator ActionStateType(ActionStateType_Prototype value) {
        return (ActionStateType)value.Value;
    }
    public static implicit operator ActionStateType_Prototype(ActionStateType value) {
        return new ActionStateType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ActorType))]
  public unsafe partial struct ActorType_Prototype {
    public Int32 Value;
    public static implicit operator ActorType(ActorType_Prototype value) {
        return (ActorType)value.Value;
    }
    public static implicit operator ActorType_Prototype(ActorType value) {
        return new ActorType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DebuffType))]
  public unsafe partial struct DebuffType_Prototype {
    public Int32 Value;
    public static implicit operator DebuffType(DebuffType_Prototype value) {
        return (DebuffType)value.Value;
    }
    public static implicit operator DebuffType_Prototype(DebuffType value) {
        return new DebuffType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DiceType))]
  public unsafe partial struct DiceType_Prototype {
    public Int32 Value;
    public static implicit operator DiceType(DiceType_Prototype value) {
        return (DiceType)value.Value;
    }
    public static implicit operator DiceType_Prototype(DiceType value) {
        return new DiceType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPWorldState))]
  public unsafe partial struct GOAPWorldState_Prototype {
    public Int64 Value;
    public static implicit operator GOAPWorldState(GOAPWorldState_Prototype value) {
        return (GOAPWorldState)value.Value;
    }
    public static implicit operator GOAPWorldState_Prototype(GOAPWorldState value) {
        return new GOAPWorldState_Prototype() { Value = (Int64)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HitColor))]
  public unsafe partial struct HitColor_Prototype {
    public Int32 Value;
    public static implicit operator HitColor(HitColor_Prototype value) {
        return (HitColor)value.Value;
    }
    public static implicit operator HitColor_Prototype(HitColor value) {
        return new HitColor_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StateType))]
  public unsafe partial struct StateType_Prototype {
    public Int32 Value;
    public static implicit operator StateType(StateType_Prototype value) {
        return (StateType)value.Value;
    }
    public static implicit operator StateType_Prototype(StateType value) {
        return new StateType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIBlackboardComponent))]
  public unsafe sealed partial class AIBlackboardComponent_Prototype : ComponentPrototype<AIBlackboardComponent> {
    public AssetRefAIBlackboard Board;
    [DynamicCollectionAttribute()]
    public BlackboardEntry_Prototype[] Entries = {};
    partial void MaterializeUser(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIBlackboardComponent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context) {
      result.Board = this.Board;
      if (this.Entries.Length == 0) {
        result.Entries = default;
      } else {
        var list = frame.AllocateList<Quantum.BlackboardEntry>(this.Entries.Length);
        for (int i = 0; i < this.Entries.Length; ++i) {
          Quantum.BlackboardEntry tmp = default;
          this.Entries[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Entries = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Actor))]
  public unsafe sealed partial class Actor_Prototype : ComponentPrototype<Actor> {
    public PlayerRef Owner;
    public Int32 Team;
    partial void MaterializeUser(Frame frame, ref Actor result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Actor component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Actor result, in PrototypeMaterializationContext context) {
      result.Owner = this.Owner;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ActorCreation))]
  public unsafe sealed partial class ActorCreation_Prototype : ComponentPrototype<ActorCreation> {
    public Int32 Delay;
    partial void MaterializeUser(Frame frame, ref ActorCreation result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ActorCreation component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ActorCreation result, in PrototypeMaterializationContext context) {
      result.Delay = this.Delay;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ActorCreationSpec))]
  public unsafe sealed partial class ActorCreationSpec_Prototype : ComponentPrototype<ActorCreationSpec> {
    public PlayerRef Owner;
    public Int32 Team;
    public ActorType_Prototype ActorType;
    public Int32 DataId;
    public Int32 IngameLevel;
    public Int32 OutgameLevel;
    public Int32 DiceScale;
    public FPVector2 Position;
    public Int32 FieldIndex;
    partial void MaterializeUser(Frame frame, ref ActorCreationSpec result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ActorCreationSpec component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ActorCreationSpec result, in PrototypeMaterializationContext context) {
      result.ActorType = this.ActorType;
      result.DataId = this.DataId;
      result.DiceScale = this.DiceScale;
      result.FieldIndex = this.FieldIndex;
      result.IngameLevel = this.IngameLevel;
      result.OutgameLevel = this.OutgameLevel;
      result.Owner = this.Owner;
      result.Position = this.Position;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Attackable))]
  public unsafe sealed partial class Attackable_Prototype : ComponentPrototype<Attackable> {
    public FP Power;
    public FP AttackSpeed;
    public FP Effect;
    public FP EffectDurationTime;
    public FP EffectProbability;
    public FP EffectRangeValue;
    public FP Range;
    public FP SearchRange;
    public FP AttackHitEvent;
    public FP AttackAniLength;
    partial void MaterializeUser(Frame frame, ref Attackable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Attackable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Attackable result, in PrototypeMaterializationContext context) {
      result.AttackAniLength = this.AttackAniLength;
      result.AttackHitEvent = this.AttackHitEvent;
      result.AttackSpeed = this.AttackSpeed;
      result.Effect = this.Effect;
      result.EffectDurationTime = this.EffectDurationTime;
      result.EffectProbability = this.EffectProbability;
      result.EffectRangeValue = this.EffectRangeValue;
      result.Power = this.Power;
      result.Range = this.Range;
      result.SearchRange = this.SearchRange;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTAgent))]
  public unsafe sealed partial class BTAgent_Prototype : ComponentPrototype<BTAgent> {
    public AssetRefBTNode Tree;
    public AssetRefBTNode Current;
    [DynamicCollectionAttribute()]
    public Byte[] NodesStatus = {};
    [DynamicCollectionAttribute()]
    public Int32[] ServicesNextTicks = {};
    [DynamicCollectionAttribute()]
    public BTDataValue_Prototype[] BTDataValues = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTService[] ActiveServices = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTComposite[] DynamicComposites = {};
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context) {
      if (this.ActiveServices.Length == 0) {
        result.ActiveServices = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTService>(this.ActiveServices.Length);
        for (int i = 0; i < this.ActiveServices.Length; ++i) {
          Quantum.AssetRefBTService tmp = default;
          tmp = this.ActiveServices[i];
          list.Add(tmp);
        }
        result.ActiveServices = list;
      }
      if (this.BTDataValues.Length == 0) {
        result.BTDataValues = default;
      } else {
        var list = frame.AllocateList<Quantum.BTDataValue>(this.BTDataValues.Length);
        for (int i = 0; i < this.BTDataValues.Length; ++i) {
          Quantum.BTDataValue tmp = default;
          this.BTDataValues[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BTDataValues = list;
      }
      result.Config = this.Config;
      result.Current = this.Current;
      if (this.DynamicComposites.Length == 0) {
        result.DynamicComposites = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTComposite>(this.DynamicComposites.Length);
        for (int i = 0; i < this.DynamicComposites.Length; ++i) {
          Quantum.AssetRefBTComposite tmp = default;
          tmp = this.DynamicComposites[i];
          list.Add(tmp);
        }
        result.DynamicComposites = list;
      }
      if (this.NodesStatus.Length == 0) {
        result.NodesStatus = default;
      } else {
        var list = frame.AllocateList<Byte>(this.NodesStatus.Length);
        for (int i = 0; i < this.NodesStatus.Length; ++i) {
          Byte tmp = default;
          tmp = this.NodesStatus[i];
          list.Add(tmp);
        }
        result.NodesStatus = list;
      }
      if (this.ServicesNextTicks.Length == 0) {
        result.ServicesNextTicks = default;
      } else {
        var list = frame.AllocateList<Int32>(this.ServicesNextTicks.Length);
        for (int i = 0; i < this.ServicesNextTicks.Length; ++i) {
          Int32 tmp = default;
          tmp = this.ServicesNextTicks[i];
          list.Add(tmp);
        }
        result.ServicesNextTicks = list;
      }
      result.Tree = this.Tree;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataIndex))]
  public unsafe sealed partial class BTDataIndex_Prototype : StructPrototype {
    public Int32 Index;
    partial void MaterializeUser(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context) {
      result.Index = this.Index;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataValue))]
  public unsafe sealed partial class BTDataValue_Prototype : UnionPrototype {
    public string _field_used_;
    public FP FPValue;
    public Int32 IntValue;
    partial void MaterializeUser(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "INTVALUE": *result.IntValue = this.IntValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardEntry))]
  public unsafe sealed partial class BlackboardEntry_Prototype : StructPrototype {
    public BlackboardValue_Prototype Value;
    [DynamicCollectionAttribute()]
    public AssetRefBTDecorator[] ReactiveDecorators = {};
    partial void MaterializeUser(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context) {
      if (this.ReactiveDecorators.Length == 0) {
        result.ReactiveDecorators = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTDecorator>(this.ReactiveDecorators.Length);
        for (int i = 0; i < this.ReactiveDecorators.Length; ++i) {
          Quantum.AssetRefBTDecorator tmp = default;
          tmp = this.ReactiveDecorators[i];
          list.Add(tmp);
        }
        result.ReactiveDecorators = list;
      }
      this.Value.Materialize(frame, ref result.Value, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardValue))]
  public unsafe sealed partial class BlackboardValue_Prototype : UnionPrototype {
    public string _field_used_;
    public QBoolean BooleanValue;
    public Byte ByteValue;
    public Int32 IntegerValue;
    public FP FPValue;
    public FPVector2 FPVector2Value;
    public FPVector3 FPVector3Value;
    public MapEntityId EntityRefValue;
    partial void MaterializeUser(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "BOOLEANVALUE": *result.BooleanValue = this.BooleanValue; break;
        case "BYTEVALUE": *result.ByteValue = this.ByteValue; break;
        case "ENTITYREFVALUE": PrototypeValidator.FindMapEntity(this.EntityRefValue, in context, out *result.EntityRefValue); break;
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "FPVECTOR2VALUE": *result.FPVector2Value = this.FPVector2Value; break;
        case "FPVECTOR3VALUE": *result.FPVector3Value = this.FPVector3Value; break;
        case "INTEGERVALUE": *result.IntegerValue = this.IntegerValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Boss))]
  public unsafe sealed partial class Boss_Prototype : ComponentPrototype<Boss> {
    public Int32 BossInfoId;
    public Int32 BossIndex;
    partial void MaterializeUser(Frame frame, ref Boss result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Boss component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Boss result, in PrototypeMaterializationContext context) {
      result.BossIndex = this.BossIndex;
      result.BossInfoId = this.BossInfoId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Buff))]
  public unsafe sealed partial class Buff_Prototype : ComponentPrototype<Buff> {
    public Int32 BuffStateApplied;
    public Int32 BuffState;
    partial void MaterializeUser(Frame frame, ref Buff result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Buff component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Buff result, in PrototypeMaterializationContext context) {
      result.BuffState = this.BuffState;
      result.BuffStateApplied = this.BuffStateApplied;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DamagePerSec))]
  public unsafe sealed partial class DamagePerSec_Prototype : ComponentPrototype<DamagePerSec> {
    public FP Damage;
    partial void MaterializeUser(Frame frame, ref DamagePerSec result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      DamagePerSec component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref DamagePerSec result, in PrototypeMaterializationContext context) {
      result.Damage = this.Damage;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Deck))]
  public unsafe sealed partial class Deck_Prototype : ComponentPrototype<Deck> {
    public Int32 GuardianId;
    [ArrayLengthAttribute(5)]
    public DeckDice_Prototype[] Dices = new DeckDice_Prototype[5];
    partial void MaterializeUser(Frame frame, ref Deck result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Deck component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Deck result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(Dices, 5, in context); i < count; ++i) {
        this.Dices[i].Materialize(frame, ref *result.Dices.GetPointer(i), in context);
      }
      result.GuardianId = this.GuardianId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DeckDice))]
  public unsafe sealed partial class DeckDice_Prototype : StructPrototype {
    public Int32 DiceId;
    public Int32 OutGameLevel;
    public Int32 InGameLevel;
    partial void MaterializeUser(Frame frame, ref DeckDice result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref DeckDice result, in PrototypeMaterializationContext context) {
      result.DiceId = this.DiceId;
      result.InGameLevel = this.InGameLevel;
      result.OutGameLevel = this.OutGameLevel;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Destroy))]
  public unsafe sealed partial class Destroy_Prototype : ComponentPrototype<Destroy> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Destroy result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Destroy component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Destroy result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Dice))]
  public unsafe sealed partial class Dice_Prototype : ComponentPrototype<Dice> {
    public Int32 DiceInfoId;
    public Int32 DiceScale;
    public Int32 IngameUpgradeLevel;
    public Int32 OutgameUpgradeLevel;
    public Int32 FieldIndex;
    partial void MaterializeUser(Frame frame, ref Dice result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Dice component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Dice result, in PrototypeMaterializationContext context) {
      result.DiceInfoId = this.DiceInfoId;
      result.DiceScale = this.DiceScale;
      result.FieldIndex = this.FieldIndex;
      result.IngameUpgradeLevel = this.IngameUpgradeLevel;
      result.OutgameUpgradeLevel = this.OutgameUpgradeLevel;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DiceCreation))]
  public unsafe sealed partial class DiceCreation_Prototype : ComponentPrototype<DiceCreation> {
    public Int32 Count;
    partial void MaterializeUser(Frame frame, ref DiceCreation result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      DiceCreation component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref DiceCreation result, in PrototypeMaterializationContext context) {
      result.Count = this.Count;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Field))]
  public unsafe sealed partial class Field_Prototype : ComponentPrototype<Field> {
    [ArrayLengthAttribute(15)]
    public FieldDice_Prototype[] Dices = new FieldDice_Prototype[15];
    partial void MaterializeUser(Frame frame, ref Field result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Field component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Field result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(Dices, 15, in context); i < count; ++i) {
        this.Dices[i].Materialize(frame, ref *result.Dices.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(FieldDice))]
  public unsafe sealed partial class FieldDice_Prototype : StructPrototype {
    public Int32 DiceScale;
    public Int32 DeckIndex;
    partial void MaterializeUser(Frame frame, ref FieldDice result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref FieldDice result, in PrototypeMaterializationContext context) {
      result.DeckIndex = this.DeckIndex;
      result.DiceScale = this.DiceScale;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Frozen))]
  public unsafe sealed partial class Frozen_Prototype : ComponentPrototype<Frozen> {
    public FP EndTime;
    partial void MaterializeUser(Frame frame, ref Frozen result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Frozen component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Frozen result, in PrototypeMaterializationContext context) {
      result.EndTime = this.EndTime;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPAgent))]
  public unsafe sealed partial class GOAPAgent_Prototype : ComponentPrototype<GOAPAgent> {
    public Int64 CurrentState;
    public GOAPState_Prototype Goal;
    [ArrayLengthAttribute(4)]
    public AssetRefGOAPTask[] Plan = new AssetRefGOAPTask[4];
    public Int32 CurrentTaskIndex;
    public Int32 TaskCount;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GOAPAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      result.CurrentState = this.CurrentState;
      result.CurrentTaskIndex = this.CurrentTaskIndex;
      this.Goal.Materialize(frame, ref result.Goal, in context);
      for (int i = 0, count = PrototypeValidator.CheckLength(Plan, 4, in context); i < count; ++i) {
        *result.Plan.GetPointer(i) = this.Plan[i];
      }
      result.TaskCount = this.TaskCount;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPState))]
  public unsafe sealed partial class GOAPState_Prototype : StructPrototype {
    public Int64 Positive;
    public Int64 Negative;
    partial void MaterializeUser(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context) {
      result.Negative = this.Negative;
      result.Positive = this.Positive;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Guardian))]
  public unsafe sealed partial class Guardian_Prototype : ComponentPrototype<Guardian> {
    public Int32 GuardianInfoId;
    partial void MaterializeUser(Frame frame, ref Guardian result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Guardian component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Guardian result, in PrototypeMaterializationContext context) {
      result.GuardianInfoId = this.GuardianInfoId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMAgent))]
  public unsafe sealed partial class HFSMAgent_Prototype : ComponentPrototype<HFSMAgent> {
    public HFSMData_Prototype Data;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HFSMAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      this.Data.Materialize(frame, ref result.Data, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMData))]
  public unsafe sealed partial class HFSMData_Prototype : StructPrototype {
    public AssetRefHFSMRoot Root;
    public AssetRefHFSMState CurrentState;
    public FP Time;
    [ArrayLengthAttribute(8)]
    public FP[] Times = new FP[8];
    partial void MaterializeUser(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context) {
      result.CurrentState = this.CurrentState;
      result.Root = this.Root;
      result.Time = this.Time;
      for (int i = 0, count = PrototypeValidator.CheckLength(Times, 8, in context); i < count; ++i) {
        *result.Times.GetPointer(i) = this.Times[i];
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Health))]
  public unsafe sealed partial class Health_Prototype : ComponentPrototype<Health> {
    public FP Value;
    public FP MaxValue;
    partial void MaterializeUser(Frame frame, ref Health result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Health component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Health result, in PrototypeMaterializationContext context) {
      result.MaxValue = this.MaxValue;
      result.Value = this.Value;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Hittable))]
  public unsafe sealed partial class Hittable_Prototype : ComponentPrototype<Hittable> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Hittable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Hittable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Hittable result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public unsafe sealed partial class Input_Prototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Mine))]
  public unsafe sealed partial class Mine_Prototype : ComponentPrototype<Mine> {
    public FPVector2 StartPosition;
    public FPVector2 Destination;
    public FP SpawnVertical;
    public FP SpawnTime;
    public FP ArriveTime;
    public QBoolean Arrived;
    partial void MaterializeUser(Frame frame, ref Mine result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Mine component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Mine result, in PrototypeMaterializationContext context) {
      result.ArriveTime = this.ArriveTime;
      result.Arrived = this.Arrived;
      result.Destination = this.Destination;
      result.SpawnTime = this.SpawnTime;
      result.SpawnVertical = this.SpawnVertical;
      result.StartPosition = this.StartPosition;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Movable))]
  public unsafe sealed partial class Movable_Prototype : ComponentPrototype<Movable> {
    public FP MoveSpeed;
    partial void MaterializeUser(Frame frame, ref Movable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Movable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Movable result, in PrototypeMaterializationContext context) {
      result.MoveSpeed = this.MoveSpeed;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(NoCC))]
  public unsafe sealed partial class NoCC_Prototype : ComponentPrototype<NoCC> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref NoCC result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      NoCC component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref NoCC result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerBot))]
  public unsafe sealed partial class PlayerBot_Prototype : ComponentPrototype<PlayerBot> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref PlayerBot result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerBot component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerBot result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Projectile))]
  public unsafe sealed partial class Projectile_Prototype : ComponentPrototype<Projectile> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Projectile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Projectile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Projectile result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ProjectileCreation))]
  public unsafe sealed partial class ProjectileCreation_Prototype : ComponentPrototype<ProjectileCreation> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref ProjectileCreation result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ProjectileCreation component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ProjectileCreation result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ProjectileSpec))]
  public unsafe sealed partial class ProjectileSpec_Prototype : ComponentPrototype<ProjectileSpec> {
    public PlayerRef Owner;
    public Int32 Team;
    public FP Power;
    public FP HitTime;
    public MapEntityId Attacker;
    public MapEntityId Defender;
    [MaxStringByteCount(62, "Unicode")]
    public string Model;
    [MaxStringByteCount(62, "Unicode")]
    public string HitEffect;
    public DebuffType_Prototype Debuff;
    public FP DebuffDuration;
    partial void MaterializeUser(Frame frame, ref ProjectileSpec result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ProjectileSpec component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ProjectileSpec result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Attacker, in context, out result.Attacker);
      result.Debuff = this.Debuff;
      result.DebuffDuration = this.DebuffDuration;
      PrototypeValidator.FindMapEntity(this.Defender, in context, out result.Defender);
      PrototypeValidator.AssignQString(this.HitEffect, 64, in context, out result.HitEffect);
      result.HitTime = this.HitTime;
      PrototypeValidator.AssignQString(this.Model, 64, in context, out result.Model);
      result.Owner = this.Owner;
      result.Power = this.Power;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(RWPlayer))]
  public unsafe sealed partial class RWPlayer_Prototype : StructPrototype {
    public PlayerRef PlayerRef;
    public Int32 Team;
    public MapEntityId EntityRef;
    [MaxStringByteCount(126, "Unicode")]
    public string NickName;
    [MaxStringByteCount(126, "Unicode")]
    public string UserId;
    partial void MaterializeUser(Frame frame, ref RWPlayer result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref RWPlayer result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.EntityRef, in context, out result.EntityRef);
      PrototypeValidator.AssignQString(this.NickName, 128, in context, out result.NickName);
      result.PlayerRef = this.PlayerRef;
      result.Team = this.Team;
      PrototypeValidator.AssignQString(this.UserId, 128, in context, out result.UserId);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Shield))]
  public unsafe sealed partial class Shield_Prototype : ComponentPrototype<Shield> {
    public FP EndTime;
    partial void MaterializeUser(Frame frame, ref Shield result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Shield component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Shield result, in PrototypeMaterializationContext context) {
      result.EndTime = this.EndTime;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Skill))]
  public unsafe sealed partial class Skill_Prototype : ComponentPrototype<Skill> {
    public FP CoolTime;
    public FP AvailableTime;
    partial void MaterializeUser(Frame frame, ref Skill result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Skill component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Skill result, in PrototypeMaterializationContext context) {
      result.AvailableTime = this.AvailableTime;
      result.CoolTime = this.CoolTime;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Sp))]
  public unsafe sealed partial class Sp_Prototype : ComponentPrototype<Sp> {
    public Int32 CurrentSp;
    public Int32 CommingSp;
    public Int32 CommingSpGrade;
    partial void MaterializeUser(Frame frame, ref Sp result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Sp component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Sp result, in PrototypeMaterializationContext context) {
      result.CommingSp = this.CommingSp;
      result.CommingSpGrade = this.CommingSpGrade;
      result.CurrentSp = this.CurrentSp;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StoneBall))]
  public unsafe sealed partial class StoneBall_Prototype : ComponentPrototype<StoneBall> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref StoneBall result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      StoneBall component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref StoneBall result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Taunted))]
  public unsafe sealed partial class Taunted_Prototype : ComponentPrototype<Taunted> {
    public FP EndTime;
    partial void MaterializeUser(Frame frame, ref Taunted result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Taunted component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Taunted result, in PrototypeMaterializationContext context) {
      result.EndTime = this.EndTime;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Tower))]
  public unsafe sealed partial class Tower_Prototype : ComponentPrototype<Tower> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Tower result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Tower component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Tower result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Trigger))]
  public unsafe sealed partial class Trigger_Prototype : ComponentPrototype<Trigger> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Trigger result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Trigger component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Trigger result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AIBlackboardComponent_Prototype> AIBlackboardComponent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Actor_Prototype> Actor;
    [ArrayLength(0, 1)]
    public List<Prototypes.ActorCreation_Prototype> ActorCreation;
    [ArrayLength(0, 1)]
    public List<Prototypes.ActorCreationSpec_Prototype> ActorCreationSpec;
    [ArrayLength(0, 1)]
    public List<Prototypes.Attackable_Prototype> Attackable;
    [ArrayLength(0, 1)]
    public List<Prototypes.BTAgent_Prototype> BTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Boss_Prototype> Boss;
    [ArrayLength(0, 1)]
    public List<Prototypes.Buff_Prototype> Buff;
    [ArrayLength(0, 1)]
    public List<Prototypes.DamagePerSec_Prototype> DamagePerSec;
    [ArrayLength(0, 1)]
    public List<Prototypes.Deck_Prototype> Deck;
    [ArrayLength(0, 1)]
    public List<Prototypes.Destroy_Prototype> Destroy;
    [ArrayLength(0, 1)]
    public List<Prototypes.Dice_Prototype> Dice;
    [ArrayLength(0, 1)]
    public List<Prototypes.DiceCreation_Prototype> DiceCreation;
    [ArrayLength(0, 1)]
    public List<Prototypes.Field_Prototype> Field;
    [ArrayLength(0, 1)]
    public List<Prototypes.Frozen_Prototype> Frozen;
    [ArrayLength(0, 1)]
    public List<Prototypes.GOAPAgent_Prototype> GOAPAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Guardian_Prototype> Guardian;
    [ArrayLength(0, 1)]
    public List<Prototypes.HFSMAgent_Prototype> HFSMAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Health_Prototype> Health;
    [ArrayLength(0, 1)]
    public List<Prototypes.Hittable_Prototype> Hittable;
    [ArrayLength(0, 1)]
    public List<Prototypes.Mine_Prototype> Mine;
    [ArrayLength(0, 1)]
    public List<Prototypes.Movable_Prototype> Movable;
    [ArrayLength(0, 1)]
    public List<Prototypes.NoCC_Prototype> NoCC;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerBot_Prototype> PlayerBot;
    [ArrayLength(0, 1)]
    public List<Prototypes.Projectile_Prototype> Projectile;
    [ArrayLength(0, 1)]
    public List<Prototypes.ProjectileCreation_Prototype> ProjectileCreation;
    [ArrayLength(0, 1)]
    public List<Prototypes.ProjectileSpec_Prototype> ProjectileSpec;
    [ArrayLength(0, 1)]
    public List<Prototypes.Shield_Prototype> Shield;
    [ArrayLength(0, 1)]
    public List<Prototypes.Skill_Prototype> Skill;
    [ArrayLength(0, 1)]
    public List<Prototypes.Sp_Prototype> Sp;
    [ArrayLength(0, 1)]
    public List<Prototypes.StoneBall_Prototype> StoneBall;
    [ArrayLength(0, 1)]
    public List<Prototypes.Taunted_Prototype> Taunted;
    [ArrayLength(0, 1)]
    public List<Prototypes.Tower_Prototype> Tower;
    [ArrayLength(0, 1)]
    public List<Prototypes.Trigger_Prototype> Trigger;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIBlackboardComponent, target);
      Collect(Actor, target);
      Collect(ActorCreation, target);
      Collect(ActorCreationSpec, target);
      Collect(Attackable, target);
      Collect(BTAgent, target);
      Collect(Boss, target);
      Collect(Buff, target);
      Collect(DamagePerSec, target);
      Collect(Deck, target);
      Collect(Destroy, target);
      Collect(Dice, target);
      Collect(DiceCreation, target);
      Collect(Field, target);
      Collect(Frozen, target);
      Collect(GOAPAgent, target);
      Collect(Guardian, target);
      Collect(HFSMAgent, target);
      Collect(Health, target);
      Collect(Hittable, target);
      Collect(Mine, target);
      Collect(Movable, target);
      Collect(NoCC, target);
      Collect(PlayerBot, target);
      Collect(Projectile, target);
      Collect(ProjectileCreation, target);
      Collect(ProjectileSpec, target);
      Collect(Shield, target);
      Collect(Skill, target);
      Collect(Sp, target);
      Collect(StoneBall, target);
      Collect(Taunted, target);
      Collect(Tower, target);
      Collect(Trigger, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIBlackboardComponent);
      }
      public override void Visit(Prototypes.Actor_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Actor);
      }
      public override void Visit(Prototypes.ActorCreation_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ActorCreation);
      }
      public override void Visit(Prototypes.ActorCreationSpec_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ActorCreationSpec);
      }
      public override void Visit(Prototypes.Attackable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Attackable);
      }
      public override void Visit(Prototypes.BTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BTAgent);
      }
      public override void Visit(Prototypes.Boss_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Boss);
      }
      public override void Visit(Prototypes.Buff_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Buff);
      }
      public override void Visit(Prototypes.DamagePerSec_Prototype prototype) {
        Storage.Store(prototype, ref Storage.DamagePerSec);
      }
      public override void Visit(Prototypes.Deck_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Deck);
      }
      public override void Visit(Prototypes.Destroy_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Destroy);
      }
      public override void Visit(Prototypes.Dice_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Dice);
      }
      public override void Visit(Prototypes.DiceCreation_Prototype prototype) {
        Storage.Store(prototype, ref Storage.DiceCreation);
      }
      public override void Visit(Prototypes.Field_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Field);
      }
      public override void Visit(Prototypes.Frozen_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Frozen);
      }
      public override void Visit(Prototypes.GOAPAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GOAPAgent);
      }
      public override void Visit(Prototypes.Guardian_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Guardian);
      }
      public override void Visit(Prototypes.HFSMAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HFSMAgent);
      }
      public override void Visit(Prototypes.Health_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Health);
      }
      public override void Visit(Prototypes.Hittable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Hittable);
      }
      public override void Visit(Prototypes.Mine_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Mine);
      }
      public override void Visit(Prototypes.Movable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Movable);
      }
      public override void Visit(Prototypes.NoCC_Prototype prototype) {
        Storage.Store(prototype, ref Storage.NoCC);
      }
      public override void Visit(Prototypes.PlayerBot_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerBot);
      }
      public override void Visit(Prototypes.Projectile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Projectile);
      }
      public override void Visit(Prototypes.ProjectileCreation_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ProjectileCreation);
      }
      public override void Visit(Prototypes.ProjectileSpec_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ProjectileSpec);
      }
      public override void Visit(Prototypes.Shield_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Shield);
      }
      public override void Visit(Prototypes.Skill_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Skill);
      }
      public override void Visit(Prototypes.Sp_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Sp);
      }
      public override void Visit(Prototypes.StoneBall_Prototype prototype) {
        Storage.Store(prototype, ref Storage.StoneBall);
      }
      public override void Visit(Prototypes.Taunted_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Taunted);
      }
      public override void Visit(Prototypes.Tower_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Tower);
      }
      public override void Visit(Prototypes.Trigger_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Trigger);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
