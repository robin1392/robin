/**
  * This code was auto-generated by a tool, every time
  * the tool executes this code will be reset.
  *
  * If you need to extend the classes generated to add
  * fields or methods to them, please create partial
  * declarations in another file.
  **/
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109


namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Optional = Quantum.Inspector.OptionalAttribute;
  
  public enum GOAPWorldState : long {
    Root = 1,
    TargetSelected = 2,
    CarryingTarget = 4,
    TargetDelivered = 8,
  }
  public enum ModeType : int {
    Battle,
    Coop,
  }
  public enum StateType : int {
    Battle,
    Preparation,
    Ready,
    Countdown,
    GameOver,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean HasFlag(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 16; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 2; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 32; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 4; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 64; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) {
          for (var i = 0; i < 8; ++i) {
            hash = hash * 31 + p[i].GetHashCode();
          }
        }
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIAction : IEquatable<AssetRefAIAction>, IAssetRef<AIAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIAction(AIAction value) {
      var r = default(AssetRefAIAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIAction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboard))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboard : IEquatable<AssetRefAIBlackboard>, IAssetRef<AIBlackboard> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboard(AIBlackboard value) {
      var r = default(AssetRefAIBlackboard);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboard other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboard other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboard*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboardInitializer))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboardInitializer : IEquatable<AssetRefAIBlackboardInitializer>, IAssetRef<AIBlackboardInitializer> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboardInitializer(AIBlackboardInitializer value) {
      var r = default(AssetRefAIBlackboardInitializer);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboardInitializer other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboardInitializer other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboardInitializer*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIConfig : IEquatable<AssetRefAIConfig>, IAssetRef<AIConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIConfig(AIConfig value) {
      var r = default(AssetRefAIConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefAIConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTComposite))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTComposite : IEquatable<AssetRefBTComposite>, IAssetRef<BTComposite> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTComposite(BTComposite value) {
      var r = default(AssetRefBTComposite);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTComposite other && Equals(other);
    }
    public Boolean Equals(AssetRefBTComposite other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTComposite*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTDecorator))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTDecorator : IEquatable<AssetRefBTDecorator>, IAssetRef<BTDecorator> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTDecorator(BTDecorator value) {
      var r = default(AssetRefBTDecorator);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTDecorator other && Equals(other);
    }
    public Boolean Equals(AssetRefBTDecorator other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTDecorator*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTNode))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTNode : IEquatable<AssetRefBTNode>, IAssetRef<BTNode> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTNode(BTNode value) {
      var r = default(AssetRefBTNode);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTNode other && Equals(other);
    }
    public Boolean Equals(AssetRefBTNode other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTNode*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTRoot : IEquatable<AssetRefBTRoot>, IAssetRef<BTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTRoot(BTRoot value) {
      var r = default(AssetRefBTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefBTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTService))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTService : IEquatable<AssetRefBTService>, IAssetRef<BTService> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTService(BTService value) {
      var r = default(AssetRefBTService);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTService other && Equals(other);
    }
    public Boolean Equals(AssetRefBTService other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTService a, AssetRefBTService b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTService a, AssetRefBTService b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTService*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPRoot : IEquatable<AssetRefGOAPRoot>, IAssetRef<GOAPRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPRoot(GOAPRoot value) {
      var r = default(AssetRefGOAPRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPTask))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPTask : IEquatable<AssetRefGOAPTask>, IAssetRef<GOAPTask> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPTask(GOAPTask value) {
      var r = default(AssetRefGOAPTask);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPTask other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPTask other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPTask a, AssetRefGOAPTask b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPTask a, AssetRefGOAPTask b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPTask*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMDecision))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMDecision : IEquatable<AssetRefHFSMDecision>, IAssetRef<HFSMDecision> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMDecision(HFSMDecision value) {
      var r = default(AssetRefHFSMDecision);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMDecision other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMDecision other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMDecision*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMRoot : IEquatable<AssetRefHFSMRoot>, IAssetRef<HFSMRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMRoot(HFSMRoot value) {
      var r = default(AssetRefHFSMRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMState))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMState : IEquatable<AssetRefHFSMState>, IAssetRef<HFSMState> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMState(HFSMState value) {
      var r = default(AssetRefHFSMState);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMState other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMState other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMState*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMTransitionSet))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMTransitionSet : IEquatable<AssetRefHFSMTransitionSet>, IAssetRef<HFSMTransitionSet> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMTransitionSet(HFSMTransitionSet value) {
      var r = default(AssetRefHFSMTransitionSet);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMTransitionSet other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMTransitionSet other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMTransitionSet*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTDataIndex {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Index;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataIndex*)ptr;
        serializer.Stream.Serialize(&p->Index);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlackboardEntry {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTDecorator))]
    private Ptr ReactiveDecoratorsPtr;
    [FieldOffset(8)]
    public BlackboardValue Value;
    public QListPtr<AssetRefBTDecorator> ReactiveDecorators {
      get {
        return new QListPtr<AssetRefBTDecorator>(ReactiveDecoratorsPtr);
      }
      set {
        ReactiveDecoratorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + ReactiveDecoratorsPtr.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardEntry*)ptr;
        QList<AssetRefBTDecorator>.Serialize(&p->ReactiveDecoratorsPtr, serializer, Quantum.AssetRefBTDecorator.Serialize);
        Quantum.BlackboardValue.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DeckDice {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 DiceId;
    [FieldOffset(4)]
    public Int32 inGameLevel;
    [FieldOffset(8)]
    public Int32 outGameLevel;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + DiceId.GetHashCode();
        hash = hash * 31 + inGameLevel.GetHashCode();
        hash = hash * 31 + outGameLevel.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DeckDice*)ptr;
        serializer.Stream.Serialize(&p->DiceId);
        serializer.Stream.Serialize(&p->inGameLevel);
        serializer.Stream.Serialize(&p->outGameLevel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct FieldDice {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 DeckIndex;
    [FieldOffset(4)]
    public Int32 DiceScale;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + DeckIndex.GetHashCode();
        hash = hash * 31 + DiceScale.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (FieldDice*)ptr;
        serializer.Stream.Serialize(&p->DeckIndex);
        serializer.Stream.Serialize(&p->DiceScale);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPState {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int64 Negative;
    [FieldOffset(8)]
    public Int64 Positive;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + Negative.GetHashCode();
        hash = hash * 31 + Positive.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPState*)ptr;
        serializer.Stream.Serialize(&p->Negative);
        serializer.Stream.Serialize(&p->Positive);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMData {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefHFSMState CurrentState;
    [FieldOffset(0)]
    public AssetRefHFSMRoot Root;
    [FieldOffset(16)]
    public FP Time;
    [FieldOffset(24)]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 8)]
    private fixed Byte _Times_[64];
    public FixedArray<FP> Times {
      get {
        fixed (byte* p = _Times_) { return new FixedArray<FP>(p, 8, 8); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Root.GetHashCode();
        hash = hash * 31 + Time.GetHashCode();
        hash = hash * 31 + Times.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMData*)ptr;
        Quantum.AssetRefHFSMRoot.Serialize(&p->Root, serializer);
        Quantum.AssetRefHFSMState.Serialize(&p->CurrentState, serializer);
        FP.Serialize(&p->Time, serializer);
        FixedArray<FP>.Serialize(p->Times, serializer, FP.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 408;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(48)]
    public FP DeltaTime;
    [FieldOffset(120)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(40)]
    public AssetRefMap Map;
    [FieldOffset(32)]
    public ModeType Mode;
    [FieldOffset(64)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(176)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(88)]
    [FramePrinter.FixedArrayAttribute(typeof(RWPlayer), 2)]
    private fixed Byte _Players_[32];
    [FieldOffset(56)]
    public FP RemainTime;
    [FieldOffset(72)]
    public RNGSession RngSession;
    [FieldOffset(24)]
    public Int32 SpWave;
    [FieldOffset(36)]
    public StateType State;
    [FieldOffset(144)]
    public BitSet256 Systems;
    [FieldOffset(28)]
    public Int32 Wave;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[24];
    public FixedArray<RWPlayer> Players {
      get {
        fixed (byte* p = _Players_) { return new FixedArray<RWPlayer>(p, 16, 2); }
      }
    }
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 4, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 173;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + (Int32)Mode;
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + Players.GetHashCode();
        hash = hash * 31 + RemainTime.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + SpWave.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + Wave.GetHashCode();
        hash = hash * 31 + input.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        FixedArray<Input>.Serialize(p->input, serializer, Quantum.Input.Serialize);
        serializer.Stream.Serialize(&p->SpWave);
        serializer.Stream.Serialize(&p->Wave);
        serializer.Stream.Serialize((Int32*)&p->Mode);
        serializer.Stream.Serialize((Int32*)&p->State);
        AssetRefMap.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        FP.Serialize(&p->RemainTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FixedArray<RWPlayer>.Serialize(p->Players, serializer, Quantum.RWPlayer.Serialize);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet256.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTDataValue {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.INTVALUE)]
    private Int32 _IntValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 FPVALUE = 1;
    public const Int32 INTVALUE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntValue {
      get {
        fixed (Int32* p = &_IntValue) {
          if (_field_used_ != INTVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 179;
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _IntValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == INTVALUE) {
          serializer.Stream.Serialize(&p->_IntValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlackboardValue {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BOOLEANVALUE)]
    private QBoolean _BooleanValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BYTEVALUE)]
    private Byte _ByteValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ENTITYREFVALUE)]
    private EntityRef _EntityRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR2VALUE)]
    private FPVector2 _FPVector2Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR3VALUE)]
    private FPVector3 _FPVector3Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.INTEGERVALUE)]
    private Int32 _IntegerValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 BOOLEANVALUE = 1;
    public const Int32 BYTEVALUE = 2;
    public const Int32 INTEGERVALUE = 3;
    public const Int32 FPVALUE = 4;
    public const Int32 FPVECTOR2VALUE = 5;
    public const Int32 FPVECTOR3VALUE = 6;
    public const Int32 ENTITYREFVALUE = 7;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public QBoolean* BooleanValue {
      get {
        fixed (QBoolean* p = &_BooleanValue) {
          if (_field_used_ != BOOLEANVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = BOOLEANVALUE;
          }
          return p;
        }
      }
    }
    public Byte* ByteValue {
      get {
        fixed (Byte* p = &_ByteValue) {
          if (_field_used_ != BYTEVALUE) {
            Native.Utils.Clear(p, 1);
            _field_used_ = BYTEVALUE;
          }
          return p;
        }
      }
    }
    public EntityRef* EntityRefValue {
      get {
        fixed (EntityRef* p = &_EntityRefValue) {
          if (_field_used_ != ENTITYREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ENTITYREFVALUE;
          }
          return p;
        }
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public FPVector2* FPVector2Value {
      get {
        fixed (FPVector2* p = &_FPVector2Value) {
          if (_field_used_ != FPVECTOR2VALUE) {
            Native.Utils.Clear(p, 16);
            _field_used_ = FPVECTOR2VALUE;
          }
          return p;
        }
      }
    }
    public FPVector3* FPVector3Value {
      get {
        fixed (FPVector3* p = &_FPVector3Value) {
          if (_field_used_ != FPVECTOR3VALUE) {
            Native.Utils.Clear(p, 24);
            _field_used_ = FPVECTOR3VALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntegerValue {
      get {
        fixed (Int32* p = &_IntegerValue) {
          if (_field_used_ != INTEGERVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTEGERVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 181;
        hash = hash * 31 + _BooleanValue.GetHashCode();
        hash = hash * 31 + _ByteValue.GetHashCode();
        hash = hash * 31 + _EntityRefValue.GetHashCode();
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _FPVector2Value.GetHashCode();
        hash = hash * 31 + _FPVector3Value.GetHashCode();
        hash = hash * 31 + _IntegerValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == BOOLEANVALUE) {
          QBoolean.Serialize(&p->_BooleanValue, serializer);
        }
        if (p->_field_used_ == BYTEVALUE) {
          serializer.Stream.Serialize(&p->_ByteValue);
        }
        if (p->_field_used_ == ENTITYREFVALUE) {
          EntityRef.Serialize(&p->_EntityRefValue, serializer);
        }
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == FPVECTOR2VALUE) {
          FPVector2.Serialize(&p->_FPVector2Value, serializer);
        }
        if (p->_field_used_ == FPVECTOR3VALUE) {
          FPVector3.Serialize(&p->_FPVector3Value, serializer);
        }
        if (p->_field_used_ == INTEGERVALUE) {
          serializer.Stream.Serialize(&p->_IntegerValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIBlackboardComponent : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIBlackboard Board;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(BlackboardEntry))]
    private Ptr EntriesPtr;
    public QListPtr<BlackboardEntry> Entries {
      get {
        return new QListPtr<BlackboardEntry>(EntriesPtr);
      }
      set {
        EntriesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + Board.GetHashCode();
        hash = hash * 31 + EntriesPtr.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIBlackboardComponent*)ptr;
        QList<BlackboardEntry>.Serialize(&p->EntriesPtr, serializer, Quantum.BlackboardEntry.Serialize);
        Quantum.AssetRefAIBlackboard.Serialize(&p->Board, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Actor : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP Health;
    [FieldOffset(16)]
    public FP MaxHealth;
    [FieldOffset(24)]
    public FP Power;
    [FieldOffset(0)]
    public UInt32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 193;
        hash = hash * 31 + Health.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Actor*)ptr;
        serializer.Stream.Serialize(&p->Team);
        FP.Serialize(&p->Health, serializer);
        FP.Serialize(&p->MaxHealth, serializer);
        FP.Serialize(&p->Power, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTAgent : Quantum.IComponent {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTService))]
    private Ptr ActiveServicesPtr;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(BTDataValue))]
    private Ptr BTDataValuesPtr;
    [FieldOffset(32)]
    public AssetRefAIConfig Config;
    [FieldOffset(40)]
    public AssetRefBTNode Current;
    [FieldOffset(16)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTComposite))]
    private Ptr DynamicCompositesPtr;
    [FieldOffset(20)]
    [FramePrinter.PtrQListAttribute(typeof(Byte))]
    private Ptr NodesStatusPtr;
    [FieldOffset(24)]
    [FramePrinter.PtrQListAttribute(typeof(Int32))]
    private Ptr ServicesNextTicksPtr;
    [FieldOffset(48)]
    public AssetRefBTNode Tree;
    public QListPtr<AssetRefBTService> ActiveServices {
      get {
        return new QListPtr<AssetRefBTService>(ActiveServicesPtr);
      }
      set {
        ActiveServicesPtr = value.Ptr;
      }
    }
    public QListPtr<BTDataValue> BTDataValues {
      get {
        return new QListPtr<BTDataValue>(BTDataValuesPtr);
      }
      set {
        BTDataValuesPtr = value.Ptr;
      }
    }
    public QListPtr<AssetRefBTComposite> DynamicComposites {
      get {
        return new QListPtr<AssetRefBTComposite>(DynamicCompositesPtr);
      }
      set {
        DynamicCompositesPtr = value.Ptr;
      }
    }
    public QListPtr<Byte> NodesStatus {
      get {
        return new QListPtr<Byte>(NodesStatusPtr);
      }
      set {
        NodesStatusPtr = value.Ptr;
      }
    }
    public QListPtr<Int32> ServicesNextTicks {
      get {
        return new QListPtr<Int32>(ServicesNextTicksPtr);
      }
      set {
        ServicesNextTicksPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 197;
        hash = hash * 31 + ActiveServicesPtr.GetHashCode();
        hash = hash * 31 + BTDataValuesPtr.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Current.GetHashCode();
        hash = hash * 31 + DynamicCompositesPtr.GetHashCode();
        hash = hash * 31 + NodesStatusPtr.GetHashCode();
        hash = hash * 31 + ServicesNextTicksPtr.GetHashCode();
        hash = hash * 31 + Tree.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTAgent*)ptr;
        QList<AssetRefBTService>.Serialize(&p->ActiveServicesPtr, serializer, Quantum.AssetRefBTService.Serialize);
        QList<BTDataValue>.Serialize(&p->BTDataValuesPtr, serializer, Quantum.BTDataValue.Serialize);
        QList<AssetRefBTComposite>.Serialize(&p->DynamicCompositesPtr, serializer, Quantum.AssetRefBTComposite.Serialize);
        QList<Byte>.Serialize(&p->NodesStatusPtr, serializer, (v, s) => {{ s.Stream.Serialize((Byte*)v); }});
        QList<Int32>.Serialize(&p->ServicesNextTicksPtr, serializer, (v, s) => {{ s.Stream.Serialize((Int32*)v); }});
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Current, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Tree, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Deck : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [FramePrinter.FixedArrayAttribute(typeof(DeckDice), 5)]
    private fixed Byte _Dices_[60];
    [FieldOffset(0)]
    public Int32 GuardianId;
    public FixedArray<DeckDice> Dices {
      get {
        fixed (byte* p = _Dices_) { return new FixedArray<DeckDice>(p, 12, 5); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 199;
        hash = hash * 31 + Dices.GetHashCode();
        hash = hash * 31 + GuardianId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Deck*)ptr;
        serializer.Stream.Serialize(&p->GuardianId);
        FixedArray<DeckDice>.Serialize(p->Dices, serializer, Quantum.DeckDice.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DiceCreation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Count;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 211;
        hash = hash * 31 + Count.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DiceCreation*)ptr;
        serializer.Stream.Serialize(&p->Count);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Field : Quantum.IComponent {
    public const Int32 SIZE = 120;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(FieldDice), 15)]
    private fixed Byte _Dices_[120];
    public FixedArray<FieldDice> Dices {
      get {
        fixed (byte* p = _Dices_) { return new FixedArray<FieldDice>(p, 8, 15); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 223;
        hash = hash * 31 + Dices.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Field*)ptr;
        FixedArray<FieldDice>.Serialize(p->Dices, serializer, Quantum.FieldDice.Serialize);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPAgent : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIConfig Config;
    [FieldOffset(48)]
    public Int64 CurrentState;
    [FieldOffset(0)]
    public Int32 CurrentTaskIndex;
    [FieldOffset(56)]
    public GOAPState Goal;
    [FieldOffset(16)]
    [FramePrinter.FixedArrayAttribute(typeof(AssetRefGOAPTask), 4)]
    private fixed Byte _Plan_[32];
    [FieldOffset(4)]
    public Int32 TaskCount;
    public FixedArray<AssetRefGOAPTask> Plan {
      get {
        fixed (byte* p = _Plan_) { return new FixedArray<AssetRefGOAPTask>(p, 8, 4); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 227;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + CurrentTaskIndex.GetHashCode();
        hash = hash * 31 + Goal.GetHashCode();
        hash = hash * 31 + Plan.GetHashCode();
        hash = hash * 31 + TaskCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPAgent*)ptr;
        serializer.Stream.Serialize(&p->CurrentTaskIndex);
        serializer.Stream.Serialize(&p->TaskCount);
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        FixedArray<AssetRefGOAPTask>.Serialize(p->Plan, serializer, Quantum.AssetRefGOAPTask.Serialize);
        serializer.Stream.Serialize(&p->CurrentState);
        Quantum.GOAPState.Serialize(&p->Goal, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMAgent : Quantum.IComponent {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAIConfig Config;
    [FieldOffset(8)]
    public HFSMData Data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 229;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMAgent*)ptr;
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.HFSMData.Serialize(&p->Data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RWPlayer : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef EntityRef;
    [FieldOffset(0)]
    public PlayerRef PlayerRef;
    [FieldOffset(4)]
    public UInt32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + EntityRef.GetHashCode();
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RWPlayer*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
        serializer.Stream.Serialize(&p->Team);
        EntityRef.Serialize(&p->EntityRef, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Sp : Quantum.IComponent {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 CommingSp;
    [FieldOffset(4)]
    public Int32 CommingSpGrade;
    [FieldOffset(8)]
    public Int32 CurrentSp;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 239;
        hash = hash * 31 + CommingSp.GetHashCode();
        hash = hash * 31 + CommingSpGrade.GetHashCode();
        hash = hash * 31 + CurrentSp.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Sp*)ptr;
        serializer.Stream.Serialize(&p->CommingSp);
        serializer.Stream.Serialize(&p->CommingSpGrade);
        serializer.Stream.Serialize(&p->CurrentSp);
    }
  }
  public unsafe partial class Frame {
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIBlackboardComponent>(new ComponentCallbacks(Quantum.AIBlackboardComponent.Serialize));
        ComponentTypeId.Add<Quantum.Actor>(new ComponentCallbacks(Quantum.Actor.Serialize));
        ComponentTypeId.Add<Quantum.BTAgent>(new ComponentCallbacks(Quantum.BTAgent.Serialize));
        ComponentTypeId.Add<Quantum.Deck>(new ComponentCallbacks(Quantum.Deck.Serialize));
        ComponentTypeId.Add<Quantum.DiceCreation>(new ComponentCallbacks(Quantum.DiceCreation.Serialize));
        ComponentTypeId.Add<Quantum.Field>(new ComponentCallbacks(Quantum.Field.Serialize));
        ComponentTypeId.Add<Quantum.GOAPAgent>(new ComponentCallbacks(Quantum.GOAPAgent.Serialize));
        ComponentTypeId.Add<Quantum.HFSMAgent>(new ComponentCallbacks(Quantum.HFSMAgent.Serialize));
        ComponentTypeId.Add<Quantum.RWPlayer>(new ComponentCallbacks(Quantum.RWPlayer.Serialize));
        ComponentTypeId.Add<Quantum.Sp>(new ComponentCallbacks(Quantum.Sp.Serialize));
      });
      Initialize(this, this.SimulationConfig.Entities);
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Actor>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Actor>();
      BuildSignalsArrayOnComponentAdded<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Deck>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Deck>();
      BuildSignalsArrayOnComponentAdded<Quantum.DiceCreation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DiceCreation>();
      BuildSignalsArrayOnComponentAdded<Quantum.Field>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Field>();
      BuildSignalsArrayOnComponentAdded<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.RWPlayer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.RWPlayer>();
      BuildSignalsArrayOnComponentAdded<Quantum.Sp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Sp>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 10;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventFieldDiceCreated.ID: return typeof(EventFieldDiceCreated);
          case EventFieldDiceMerged.ID: return typeof(EventFieldDiceMerged);
          case EventPlayerInitialized.ID: return typeof(EventPlayerInitialized);
          case EventPoweredDeckDiceUp.ID: return typeof(EventPoweredDeckDiceUp);
          case EventSpIncreased.ID: return typeof(EventSpIncreased);
          case EventSpDecreased.ID: return typeof(EventSpDecreased);
          case EventCommingSpGradeUpgraded.ID: return typeof(EventCommingSpGradeUpgraded);
          case EventCommingSpChanged.ID: return typeof(EventCommingSpChanged);
          case EventCommingSpGradeChanged.ID: return typeof(EventCommingSpGradeChanged);
          case EventDiceCreationCountChanged.ID: return typeof(EventDiceCreationCountChanged);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public void FieldDiceCreated(PlayerRef Player, Int32 FieldIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventFieldDiceCreated>(EventFieldDiceCreated.ID);
        ev.Player = Player;
        ev.FieldIndex = FieldIndex;
        _f.AddEvent(ev);
      }
      public void FieldDiceMerged(PlayerRef Player, Int32 SourceFieldIndex, Int32 TargetFieldIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventFieldDiceMerged>(EventFieldDiceMerged.ID);
        ev.Player = Player;
        ev.SourceFieldIndex = SourceFieldIndex;
        ev.TargetFieldIndex = TargetFieldIndex;
        _f.AddEvent(ev);
      }
      public void PlayerInitialized(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventPlayerInitialized>(EventPlayerInitialized.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void PoweredDeckDiceUp(PlayerRef Player, Int32 DeckIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventPoweredDeckDiceUp>(EventPoweredDeckDiceUp.ID);
        ev.Player = Player;
        ev.DeckIndex = DeckIndex;
        _f.AddEvent(ev);
      }
      public void SpIncreased(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventSpIncreased>(EventSpIncreased.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void SpDecreased(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventSpDecreased>(EventSpDecreased.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void CommingSpGradeUpgraded(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventCommingSpGradeUpgraded>(EventCommingSpGradeUpgraded.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void CommingSpChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventCommingSpChanged>(EventCommingSpChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void CommingSpGradeChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventCommingSpGradeChanged>(EventCommingSpGradeChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
      public void DiceCreationCountChanged(PlayerRef Player) {
        if (_f.Context.IsLocalPlayer(Player) == false) { return; }
        var ev = _f.Context.AcquireEvent<EventDiceCreationCountChanged>(EventDiceCreationCountChanged.ID);
        ev.Player = Player;
        _f.AddEvent(ev);
      }
    }
    public unsafe partial struct FrameAssets {
      public BTNode BTNode(AssetRefBTNode assetRef) {
         return _f.FindAsset<BTNode>(assetRef.Id);
      }
      public BTService BTService(AssetRefBTService assetRef) {
         return _f.FindAsset<BTService>(assetRef.Id);
      }
      public BTComposite BTComposite(AssetRefBTComposite assetRef) {
         return _f.FindAsset<BTComposite>(assetRef.Id);
      }
      public BTDecorator BTDecorator(AssetRefBTDecorator assetRef) {
         return _f.FindAsset<BTDecorator>(assetRef.Id);
      }
      public BTRoot BTRoot(AssetRefBTRoot assetRef) {
         return _f.FindAsset<BTRoot>(assetRef.Id);
      }
      public AIAction AIAction(AssetRefAIAction assetRef) {
         return _f.FindAsset<AIAction>(assetRef.Id);
      }
      public AIConfig AIConfig(AssetRefAIConfig assetRef) {
         return _f.FindAsset<AIConfig>(assetRef.Id);
      }
      public GOAPTask GOAPTask(AssetRefGOAPTask assetRef) {
         return _f.FindAsset<GOAPTask>(assetRef.Id);
      }
      public GOAPRoot GOAPRoot(AssetRefGOAPRoot assetRef) {
         return _f.FindAsset<GOAPRoot>(assetRef.Id);
      }
      public HFSMRoot HFSMRoot(AssetRefHFSMRoot assetRef) {
         return _f.FindAsset<HFSMRoot>(assetRef.Id);
      }
      public HFSMState HFSMState(AssetRefHFSMState assetRef) {
         return _f.FindAsset<HFSMState>(assetRef.Id);
      }
      public HFSMDecision HFSMDecision(AssetRefHFSMDecision assetRef) {
         return _f.FindAsset<HFSMDecision>(assetRef.Id);
      }
      public HFSMTransitionSet HFSMTransitionSet(AssetRefHFSMTransitionSet assetRef) {
         return _f.FindAsset<HFSMTransitionSet>(assetRef.Id);
      }
      public AIBlackboard AIBlackboard(AssetRefAIBlackboard assetRef) {
         return _f.FindAsset<AIBlackboard>(assetRef.Id);
      }
      public AIBlackboardInitializer AIBlackboardInitializer(AssetRefAIBlackboardInitializer assetRef) {
         return _f.FindAsset<AIBlackboardInitializer>(assetRef.Id);
      }
    }
  }
  public unsafe partial class EventFieldDiceCreated : EventBase {
    public new const Int32 ID = 0;
    public PlayerRef Player;
    public Int32 FieldIndex;
    protected EventFieldDiceCreated(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventFieldDiceCreated() : 
        base(0, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + FieldIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventFieldDiceMerged : EventBase {
    public new const Int32 ID = 1;
    public PlayerRef Player;
    public Int32 SourceFieldIndex;
    public Int32 TargetFieldIndex;
    protected EventFieldDiceMerged(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventFieldDiceMerged() : 
        base(1, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + SourceFieldIndex.GetHashCode();
        hash = hash * 31 + TargetFieldIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerInitialized : EventBase {
    public new const Int32 ID = 2;
    public PlayerRef Player;
    protected EventPlayerInitialized(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventPlayerInitialized() : 
        base(2, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPoweredDeckDiceUp : EventBase {
    public new const Int32 ID = 3;
    public PlayerRef Player;
    public Int32 DeckIndex;
    protected EventPoweredDeckDiceUp(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventPoweredDeckDiceUp() : 
        base(3, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + DeckIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventSpIncreased : EventBase {
    public new const Int32 ID = 4;
    public PlayerRef Player;
    protected EventSpIncreased(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventSpIncreased() : 
        base(4, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventSpDecreased : EventBase {
    public new const Int32 ID = 5;
    public PlayerRef Player;
    protected EventSpDecreased(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventSpDecreased() : 
        base(5, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpGradeUpgraded : EventBase {
    public new const Int32 ID = 6;
    public PlayerRef Player;
    protected EventCommingSpGradeUpgraded(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventCommingSpGradeUpgraded() : 
        base(6, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpChanged : EventBase {
    public new const Int32 ID = 7;
    public PlayerRef Player;
    protected EventCommingSpChanged(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventCommingSpChanged() : 
        base(7, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCommingSpGradeChanged : EventBase {
    public new const Int32 ID = 8;
    public PlayerRef Player;
    protected EventCommingSpGradeChanged(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventCommingSpGradeChanged() : 
        base(8, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDiceCreationCountChanged : EventBase {
    public new const Int32 ID = 9;
    public PlayerRef Player;
    protected EventDiceCreationCountChanged(Int32 id, Boolean synced) : 
        base(id, synced) {
    }
    public EventDiceCreationCountChanged() : 
        base(9, false) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
  }
  #region BitStreamExtensions
  static
  public unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefAIAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboard value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboardInitializer value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTComposite value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTDecorator value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTNode value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTService value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPTask value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMDecision value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMState value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMTransitionSet value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  #endregion
  [System.SerializableAttribute()]
  public unsafe partial class BTNode : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTService : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIConfig : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPTask : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMState : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMDecision : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMTransitionSet : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboard : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboardInitializer : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Actor_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Deck_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.DiceCreation_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Field_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GOAPAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HFSMAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.RWPlayer_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Sp_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
    public const Int32 PLAYERS_MAX = 2;
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIBlackboardComponent), Quantum.AIBlackboardComponent.SIZE);
      Register(typeof(Quantum.Actor), Quantum.Actor.SIZE);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(Quantum.AssetRefAIAction), Quantum.AssetRefAIAction.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboard), Quantum.AssetRefAIBlackboard.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboardInitializer), Quantum.AssetRefAIBlackboardInitializer.SIZE);
      Register(typeof(Quantum.AssetRefAIConfig), Quantum.AssetRefAIConfig.SIZE);
      Register(typeof(Quantum.AssetRefBTComposite), Quantum.AssetRefBTComposite.SIZE);
      Register(typeof(Quantum.AssetRefBTDecorator), Quantum.AssetRefBTDecorator.SIZE);
      Register(typeof(Quantum.AssetRefBTNode), Quantum.AssetRefBTNode.SIZE);
      Register(typeof(Quantum.AssetRefBTRoot), Quantum.AssetRefBTRoot.SIZE);
      Register(typeof(Quantum.AssetRefBTService), Quantum.AssetRefBTService.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGOAPRoot), Quantum.AssetRefGOAPRoot.SIZE);
      Register(typeof(Quantum.AssetRefGOAPTask), Quantum.AssetRefGOAPTask.SIZE);
      Register(typeof(Quantum.AssetRefHFSMDecision), Quantum.AssetRefHFSMDecision.SIZE);
      Register(typeof(Quantum.AssetRefHFSMRoot), Quantum.AssetRefHFSMRoot.SIZE);
      Register(typeof(Quantum.AssetRefHFSMState), Quantum.AssetRefHFSMState.SIZE);
      Register(typeof(Quantum.AssetRefHFSMTransitionSet), Quantum.AssetRefHFSMTransitionSet.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.BTAgent), Quantum.BTAgent.SIZE);
      Register(typeof(Quantum.BTDataIndex), Quantum.BTDataIndex.SIZE);
      Register(typeof(Quantum.BTDataValue), Quantum.BTDataValue.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BlackboardEntry), Quantum.BlackboardEntry.SIZE);
      Register(typeof(Quantum.BlackboardValue), Quantum.BlackboardValue.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(Quantum.Deck), Quantum.Deck.SIZE);
      Register(typeof(Quantum.DeckDice), Quantum.DeckDice.SIZE);
      Register(typeof(Quantum.DiceCreation), Quantum.DiceCreation.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(Quantum.Field), Quantum.Field.SIZE);
      Register(typeof(Quantum.FieldDice), Quantum.FieldDice.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.GOAPAgent), Quantum.GOAPAgent.SIZE);
      Register(typeof(Quantum.GOAPState), Quantum.GOAPState.SIZE);
      Register(typeof(Quantum.GOAPWorldState), 8);
      Register(typeof(Quantum.HFSMAgent), Quantum.HFSMAgent.SIZE);
      Register(typeof(Quantum.HFSMData), Quantum.HFSMData.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(Quantum.ModeType), 4);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Quantum.RWPlayer), Quantum.RWPlayer.SIZE);
      Register(typeof(Quantum.Sp), Quantum.Sp.SIZE);
      Register(typeof(Quantum.StateType), 4);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboard>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboardInitializer>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTComposite>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTDecorator>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTNode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTService>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPTask>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMDecision>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMTransitionSet>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GOAPWorldState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ModeType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.StateType>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Optional = Quantum.Inspector.OptionalAttribute;
  
  [System.SerializableAttribute()]
  [EnumWrapper(typeof(GOAPWorldState))]
  public unsafe partial struct GOAPWorldState_Prototype {
    public Int64 Value;
    public static implicit operator GOAPWorldState(GOAPWorldState_Prototype value) {
        return (GOAPWorldState)value.Value;
    }
    public static implicit operator GOAPWorldState_Prototype(GOAPWorldState value) {
        return new GOAPWorldState_Prototype() { Value = (Int64)value };
    }
  }
  [System.SerializableAttribute()]
  [EnumWrapper(typeof(ModeType))]
  public unsafe partial struct ModeType_Prototype {
    public Int32 Value;
    public static implicit operator ModeType(ModeType_Prototype value) {
        return (ModeType)value.Value;
    }
    public static implicit operator ModeType_Prototype(ModeType value) {
        return new ModeType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [EnumWrapper(typeof(StateType))]
  public unsafe partial struct StateType_Prototype {
    public Int32 Value;
    public static implicit operator StateType(StateType_Prototype value) {
        return (StateType)value.Value;
    }
    public static implicit operator StateType_Prototype(StateType value) {
        return new StateType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [EnumWrapper(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(AIBlackboardComponent))]
  public unsafe sealed partial class AIBlackboardComponent_Prototype : ComponentPrototype<AIBlackboardComponent> {
    public AssetRefAIBlackboard Board;
    public BlackboardEntry_Prototype[] Entries = {};
    partial void MaterializeUser(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIBlackboardComponent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      AIBlackboardComponent component = f.Get<AIBlackboardComponent>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context) {
      result.Board = this.Board;
      if (this.Entries.Length == 0) {
        result.Entries = default;
      } else {
        var list = frame.AllocateList<Quantum.BlackboardEntry>(this.Entries.Length);
        for (int i = 0; i < this.Entries.Length; ++i) {
          Quantum.BlackboardEntry tmp = default;
          this.Entries[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Entries = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref AIBlackboardComponent result, MapEntityLookup mapEntities) {
      if (this.Entries.Length > 0) {
        var list = frame.ResolveList<Quantum.BlackboardEntry>(result.Entries);
        for (int i = 0; i < this.Entries.Length; ++i) {
          this.Entries[i].SetEntityRefs(frame, ref *list.GetPointer(i), mapEntities);
        }
      }
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(Actor))]
  public unsafe sealed partial class Actor_Prototype : ComponentPrototype<Actor> {
    public UInt32 Team;
    public FP Health;
    public FP MaxHealth;
    public FP Power;
    partial void MaterializeUser(Frame frame, ref Actor result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Actor component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      Actor component = f.Get<Actor>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Actor result, in PrototypeMaterializationContext context) {
      result.Health = this.Health;
      result.MaxHealth = this.MaxHealth;
      result.Power = this.Power;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref Actor result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(BTAgent))]
  public unsafe sealed partial class BTAgent_Prototype : ComponentPrototype<BTAgent> {
    public AssetRefBTNode Tree;
    public AssetRefBTNode Current;
    public Byte[] NodesStatus = {};
    public Int32[] ServicesNextTicks = {};
    public BTDataValue_Prototype[] BTDataValues = {};
    public AssetRefBTService[] ActiveServices = {};
    public AssetRefBTComposite[] DynamicComposites = {};
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      BTAgent component = f.Get<BTAgent>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context) {
      if (this.ActiveServices.Length == 0) {
        result.ActiveServices = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTService>(this.ActiveServices.Length);
        for (int i = 0; i < this.ActiveServices.Length; ++i) {
          Quantum.AssetRefBTService tmp = default;
          tmp = this.ActiveServices[i];
          list.Add(tmp);
        }
        result.ActiveServices = list;
      }
      if (this.BTDataValues.Length == 0) {
        result.BTDataValues = default;
      } else {
        var list = frame.AllocateList<Quantum.BTDataValue>(this.BTDataValues.Length);
        for (int i = 0; i < this.BTDataValues.Length; ++i) {
          Quantum.BTDataValue tmp = default;
          this.BTDataValues[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BTDataValues = list;
      }
      result.Config = this.Config;
      result.Current = this.Current;
      if (this.DynamicComposites.Length == 0) {
        result.DynamicComposites = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTComposite>(this.DynamicComposites.Length);
        for (int i = 0; i < this.DynamicComposites.Length; ++i) {
          Quantum.AssetRefBTComposite tmp = default;
          tmp = this.DynamicComposites[i];
          list.Add(tmp);
        }
        result.DynamicComposites = list;
      }
      if (this.NodesStatus.Length == 0) {
        result.NodesStatus = default;
      } else {
        var list = frame.AllocateList<Byte>(this.NodesStatus.Length);
        for (int i = 0; i < this.NodesStatus.Length; ++i) {
          Byte tmp = default;
          tmp = this.NodesStatus[i];
          list.Add(tmp);
        }
        result.NodesStatus = list;
      }
      if (this.ServicesNextTicks.Length == 0) {
        result.ServicesNextTicks = default;
      } else {
        var list = frame.AllocateList<Int32>(this.ServicesNextTicks.Length);
        for (int i = 0; i < this.ServicesNextTicks.Length; ++i) {
          Int32 tmp = default;
          tmp = this.ServicesNextTicks[i];
          list.Add(tmp);
        }
        result.ServicesNextTicks = list;
      }
      result.Tree = this.Tree;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref BTAgent result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class BTDataIndex_Prototype : IPrototype {
    public Int32 Index;
    partial void MaterializeUser(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context) {
      result.Index = this.Index;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class BTDataValue_Prototype : UnionPrototype {
    public FP FPValue;
    public Int32 IntValue;
    partial void MaterializeUser(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "INTVALUE": *result.IntValue = this.IntValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref BTDataValue result, MapEntityLookup mapEntities) {
      switch (_field_used_) {
        default: break;
      }
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class BlackboardEntry_Prototype : IPrototype {
    public BlackboardValue_Prototype Value;
    public AssetRefBTDecorator[] ReactiveDecorators = {};
    partial void MaterializeUser(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context) {
      if (this.ReactiveDecorators.Length == 0) {
        result.ReactiveDecorators = default;
      } else {
        var list = frame.AllocateList<Quantum.AssetRefBTDecorator>(this.ReactiveDecorators.Length);
        for (int i = 0; i < this.ReactiveDecorators.Length; ++i) {
          Quantum.AssetRefBTDecorator tmp = default;
          tmp = this.ReactiveDecorators[i];
          list.Add(tmp);
        }
        result.ReactiveDecorators = list;
      }
      this.Value.Materialize(frame, ref result.Value, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref BlackboardEntry result, MapEntityLookup mapEntities) {
      this.Value.SetEntityRefs(frame, ref result.Value, mapEntities);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class BlackboardValue_Prototype : UnionPrototype {
    public QBoolean BooleanValue;
    public Byte ByteValue;
    public Int32 IntegerValue;
    public FP FPValue;
    public FPVector2 FPVector2Value;
    public FPVector3 FPVector3Value;
    public MapEntityId EntityRefValue;
    partial void MaterializeUser(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "BOOLEANVALUE": *result.BooleanValue = this.BooleanValue; break;
        case "BYTEVALUE": *result.ByteValue = this.ByteValue; break;
        case "ENTITYREFVALUE": *result.EntityRefValue = default; break;
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "FPVECTOR2VALUE": *result.FPVector2Value = this.FPVector2Value; break;
        case "FPVECTOR3VALUE": *result.FPVector3Value = this.FPVector3Value; break;
        case "INTEGERVALUE": *result.IntegerValue = this.IntegerValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref BlackboardValue result, MapEntityLookup mapEntities) {
      switch (_field_used_) {
        case "ENTITYREFVALUE": PrototypeValidator.FindMapEntity(this.EntityRefValue, mapEntities, out *result.EntityRefValue); break;
        default: break;
      }
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(Deck))]
  public unsafe sealed partial class Deck_Prototype : ComponentPrototype<Deck> {
    public Int32 GuardianId;
    [FixedArrayAttribute(5)]
    public DeckDice_Prototype[] Dices = new DeckDice_Prototype[5];
    partial void MaterializeUser(Frame frame, ref Deck result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Deck component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      Deck component = f.Get<Deck>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Deck result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(Dices, 5); i < count; ++i) {
        this.Dices[i].Materialize(frame, ref *result.Dices.GetPointer(i), in context);
      }
      result.GuardianId = this.GuardianId;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref Deck result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class DeckDice_Prototype : IPrototype {
    public Int32 DiceId;
    public Int32 outGameLevel;
    public Int32 inGameLevel;
    partial void MaterializeUser(Frame frame, ref DeckDice result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref DeckDice result, in PrototypeMaterializationContext context) {
      result.DiceId = this.DiceId;
      result.inGameLevel = this.inGameLevel;
      result.outGameLevel = this.outGameLevel;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(DiceCreation))]
  public unsafe sealed partial class DiceCreation_Prototype : ComponentPrototype<DiceCreation> {
    public Int32 Count;
    partial void MaterializeUser(Frame frame, ref DiceCreation result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      DiceCreation component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      DiceCreation component = f.Get<DiceCreation>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref DiceCreation result, in PrototypeMaterializationContext context) {
      result.Count = this.Count;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref DiceCreation result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(Field))]
  public unsafe sealed partial class Field_Prototype : ComponentPrototype<Field> {
    [FixedArrayAttribute(15)]
    public FieldDice_Prototype[] Dices = new FieldDice_Prototype[15];
    partial void MaterializeUser(Frame frame, ref Field result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Field component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      Field component = f.Get<Field>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Field result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(Dices, 15); i < count; ++i) {
        this.Dices[i].Materialize(frame, ref *result.Dices.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref Field result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class FieldDice_Prototype : IPrototype {
    public Int32 DiceScale;
    public Int32 DeckIndex;
    partial void MaterializeUser(Frame frame, ref FieldDice result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref FieldDice result, in PrototypeMaterializationContext context) {
      result.DeckIndex = this.DeckIndex;
      result.DiceScale = this.DiceScale;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(GOAPAgent))]
  public unsafe sealed partial class GOAPAgent_Prototype : ComponentPrototype<GOAPAgent> {
    public Int64 CurrentState;
    public GOAPState_Prototype Goal;
    [FixedArrayAttribute(4)]
    public AssetRefGOAPTask[] Plan = new AssetRefGOAPTask[4];
    public Int32 CurrentTaskIndex;
    public Int32 TaskCount;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GOAPAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      GOAPAgent component = f.Get<GOAPAgent>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      result.CurrentState = this.CurrentState;
      result.CurrentTaskIndex = this.CurrentTaskIndex;
      this.Goal.Materialize(frame, ref result.Goal, in context);
      for (int i = 0, count = PrototypeValidator.CheckLength(Plan, 4); i < count; ++i) {
        *result.Plan.GetPointer(i) = this.Plan[i];
      }
      result.TaskCount = this.TaskCount;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref GOAPAgent result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class GOAPState_Prototype : IPrototype {
    public Int64 Positive;
    public Int64 Negative;
    partial void MaterializeUser(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context) {
      result.Negative = this.Negative;
      result.Positive = this.Positive;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(HFSMAgent))]
  public unsafe sealed partial class HFSMAgent_Prototype : ComponentPrototype<HFSMAgent> {
    public HFSMData_Prototype Data;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HFSMAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      HFSMAgent component = f.Get<HFSMAgent>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      this.Data.Materialize(frame, ref result.Data, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref HFSMAgent result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class HFSMData_Prototype : IPrototype {
    public AssetRefHFSMRoot Root;
    public AssetRefHFSMState CurrentState;
    public FP Time;
    [FixedArrayAttribute(8)]
    public FP[] Times = new FP[8];
    partial void MaterializeUser(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context) {
      result.CurrentState = this.CurrentState;
      result.Root = this.Root;
      result.Time = this.Time;
      for (int i = 0, count = PrototypeValidator.CheckLength(Times, 8); i < count; ++i) {
        *result.Times.GetPointer(i) = this.Times[i];
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  public unsafe sealed partial class Input_Prototype : IPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(RWPlayer))]
  public unsafe sealed partial class RWPlayer_Prototype : ComponentPrototype<RWPlayer> {
    public PlayerRef PlayerRef;
    public UInt32 Team;
    public MapEntityId EntityRef;
    partial void MaterializeUser(Frame frame, ref RWPlayer result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      RWPlayer component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      RWPlayer component = f.Get<RWPlayer>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref RWPlayer result, in PrototypeMaterializationContext context) {
      result.EntityRef = default;
      result.PlayerRef = this.PlayerRef;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref RWPlayer result, MapEntityLookup mapEntities) {
      PrototypeValidator.FindMapEntity(this.EntityRef, mapEntities, out result.EntityRef);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [ComponentPrototypeAttribute(typeof(Sp))]
  public unsafe sealed partial class Sp_Prototype : ComponentPrototype<Sp> {
    public Int32 CurrentSp;
    public Int32 CommingSp;
    public Int32 CommingSpGrade;
    partial void MaterializeUser(Frame frame, ref Sp result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Sp component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public override Boolean SetEntityRefs(FrameBase f, EntityRef entity, MapEntityLookup mapEntities) {
      Sp component = f.Get<Sp>(entity);
      SetEntityRefs((Frame)f, ref component, mapEntities);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Sp result, in PrototypeMaterializationContext context) {
      result.CommingSp = this.CommingSp;
      result.CommingSpGrade = this.CommingSpGrade;
      result.CurrentSp = this.CurrentSp;
      MaterializeUser(frame, ref result, in context);
    }
    public void SetEntityRefs(Frame frame, ref Sp result, MapEntityLookup mapEntities) {
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [FixedArray(0, 1)]
    public List<Prototypes.AIBlackboardComponent_Prototype> AIBlackboardComponent;
    [FixedArray(0, 1)]
    public List<Prototypes.Actor_Prototype> Actor;
    [FixedArray(0, 1)]
    public List<Prototypes.BTAgent_Prototype> BTAgent;
    [FixedArray(0, 1)]
    public List<Prototypes.Deck_Prototype> Deck;
    [FixedArray(0, 1)]
    public List<Prototypes.DiceCreation_Prototype> DiceCreation;
    [FixedArray(0, 1)]
    public List<Prototypes.Field_Prototype> Field;
    [FixedArray(0, 1)]
    public List<Prototypes.GOAPAgent_Prototype> GOAPAgent;
    [FixedArray(0, 1)]
    public List<Prototypes.HFSMAgent_Prototype> HFSMAgent;
    [FixedArray(0, 1)]
    public List<Prototypes.RWPlayer_Prototype> RWPlayer;
    [FixedArray(0, 1)]
    public List<Prototypes.Sp_Prototype> Sp;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIBlackboardComponent, target);
      Collect(Actor, target);
      Collect(BTAgent, target);
      Collect(Deck, target);
      Collect(DiceCreation, target);
      Collect(Field, target);
      Collect(GOAPAgent, target);
      Collect(HFSMAgent, target);
      Collect(RWPlayer, target);
      Collect(Sp, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIBlackboardComponent);
      }
      public override void Visit(Prototypes.Actor_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Actor);
      }
      public override void Visit(Prototypes.BTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BTAgent);
      }
      public override void Visit(Prototypes.Deck_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Deck);
      }
      public override void Visit(Prototypes.DiceCreation_Prototype prototype) {
        Storage.Store(prototype, ref Storage.DiceCreation);
      }
      public override void Visit(Prototypes.Field_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Field);
      }
      public override void Visit(Prototypes.GOAPAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GOAPAgent);
      }
      public override void Visit(Prototypes.HFSMAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HFSMAgent);
      }
      public override void Visit(Prototypes.RWPlayer_Prototype prototype) {
        Storage.Store(prototype, ref Storage.RWPlayer);
      }
      public override void Visit(Prototypes.Sp_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Sp);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
